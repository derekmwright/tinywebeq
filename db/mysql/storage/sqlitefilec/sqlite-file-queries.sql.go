// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sqlite-file-queries.sql

package sqlitefilec

import (
	"context"
)

const itemQuestByItemID = `-- name: ItemQuestByItemID :one
SELECT gob FROM item_quest WHERE item_id = ?
`

func (q *Queries) ItemQuestByItemID(ctx context.Context, itemID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, itemQuestByItemID, itemID)
	var gob string
	err := row.Scan(&gob)
	return gob, err
}

const itemQuestCreate = `-- name: ItemQuestCreate :exec
CREATE TABLE IF NOT EXISTS item_quest (item_id INTEGER PRIMARY KEY, gob TEXT NOT NULL)
`

func (q *Queries) ItemQuestCreate(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, itemQuestCreate)
	return err
}

const itemQuestReplace = `-- name: ItemQuestReplace :exec
REPLACE INTO item_quest (item_id, gob) VALUES (?, ?)
`

type ItemQuestReplaceParams struct {
	ItemID int64
	Gob    string
}

func (q *Queries) ItemQuestReplace(ctx context.Context, arg ItemQuestReplaceParams) error {
	_, err := q.db.ExecContext(ctx, itemQuestReplace, arg.ItemID, arg.Gob)
	return err
}

const itemQuestTruncate = `-- name: ItemQuestTruncate :exec
DELETE FROM item_quest
`

func (q *Queries) ItemQuestTruncate(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, itemQuestTruncate)
	return err
}

const itemRecipeByItemID = `-- name: ItemRecipeByItemID :one
SELECT gob FROM item_recipe WHERE item_id = ?
`

func (q *Queries) ItemRecipeByItemID(ctx context.Context, itemID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, itemRecipeByItemID, itemID)
	var gob string
	err := row.Scan(&gob)
	return gob, err
}

const itemRecipeCreate = `-- name: ItemRecipeCreate :exec
CREATE TABLE IF NOT EXISTS item_recipe (item_id INTEGER PRIMARY KEY, gob TEXT NOT NULL)
`

func (q *Queries) ItemRecipeCreate(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, itemRecipeCreate)
	return err
}

const itemRecipeReplace = `-- name: ItemRecipeReplace :exec
REPLACE INTO item_recipe (item_id, gob) VALUES (?, ?)
`

type ItemRecipeReplaceParams struct {
	ItemID int64
	Gob    string
}

func (q *Queries) ItemRecipeReplace(ctx context.Context, arg ItemRecipeReplaceParams) error {
	_, err := q.db.ExecContext(ctx, itemRecipeReplace, arg.ItemID, arg.Gob)
	return err
}

const itemRecipeTruncate = `-- name: ItemRecipeTruncate :exec
DELETE FROM item_recipe
`

func (q *Queries) ItemRecipeTruncate(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, itemRecipeTruncate)
	return err
}

const npcQuestByNpcID = `-- name: NpcQuestByNpcID :one
SELECT gob FROM npc_quest WHERE npc_id = ?
`

func (q *Queries) NpcQuestByNpcID(ctx context.Context, npcID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, npcQuestByNpcID, npcID)
	var gob string
	err := row.Scan(&gob)
	return gob, err
}

const npcQuestCreate = `-- name: NpcQuestCreate :exec
CREATE TABLE IF NOT EXISTS npc_quest (npc_id INTEGER PRIMARY KEY, gob TEXT NOT NULL)
`

func (q *Queries) NpcQuestCreate(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, npcQuestCreate)
	return err
}

const npcQuestReplace = `-- name: NpcQuestReplace :exec
REPLACE INTO npc_quest (npc_id, gob) VALUES (?, ?)
`

type NpcQuestReplaceParams struct {
	NpcID int64
	Gob   string
}

func (q *Queries) NpcQuestReplace(ctx context.Context, arg NpcQuestReplaceParams) error {
	_, err := q.db.ExecContext(ctx, npcQuestReplace, arg.NpcID, arg.Gob)
	return err
}

const npcQuestTruncate = `-- name: NpcQuestTruncate :exec
DELETE FROM npc_quest
`

func (q *Queries) NpcQuestTruncate(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, npcQuestTruncate)
	return err
}

const questAll = `-- name: QuestAll :many
SELECT id, gob FROM quest
`

func (q *Queries) QuestAll(ctx context.Context) ([]Quest, error) {
	rows, err := q.db.QueryContext(ctx, questAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quest
	for rows.Next() {
		var i Quest
		if err := rows.Scan(&i.ID, &i.Gob); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const questByID = `-- name: QuestByID :one
SELECT gob FROM quest WHERE id = ?
`

func (q *Queries) QuestByID(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, questByID, id)
	var gob string
	err := row.Scan(&gob)
	return gob, err
}

const questCreate = `-- name: QuestCreate :exec
CREATE TABLE IF NOT EXISTS quest (id INTEGER PRIMARY KEY, gob TEXT NOT NULL)
`

func (q *Queries) QuestCreate(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, questCreate)
	return err
}

const questNextID = `-- name: QuestNextID :one
SELECT id+1 FROM quest ORDER BY id DESC LIMIT 1
`

func (q *Queries) QuestNextID(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, questNextID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const questReplace = `-- name: QuestReplace :exec
REPLACE INTO quest (id, gob) VALUES (?, ?)
`

type QuestReplaceParams struct {
	ID  int64
	Gob string
}

func (q *Queries) QuestReplace(ctx context.Context, arg QuestReplaceParams) error {
	_, err := q.db.ExecContext(ctx, questReplace, arg.ID, arg.Gob)
	return err
}

const questTruncate = `-- name: QuestTruncate :exec
DELETE FROM quest
`

func (q *Queries) QuestTruncate(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, questTruncate)
	return err
}
