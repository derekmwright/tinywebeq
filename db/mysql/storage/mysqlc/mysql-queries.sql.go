// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: mysql-queries.sql

package mysqlc

import (
	"context"
	"database/sql"
)

const itemByID = `-- name: ItemByID :one
SELECT id, minstatus, name, aagi, ac, accuracy, acha, adex, aint, artifactflag, asta, astr, attack, augrestrict, augslot1type, augslot1visible, augslot2type, augslot2visible, augslot3type, augslot3visible, augslot4type, augslot4visible, augslot5type, augslot5visible, augslot6type, augslot6visible, augtype, avoidance, awis, bagsize, bagslots, bagtype, bagwr, banedmgamt, banedmgraceamt, banedmgbody, banedmgrace, bardtype, bardvalue, book, casttime, casttime_, charmfile, charmfileid, classes, color, combateffects, extradmgskill, extradmgamt, price, cr, damage, damageshield, deity, delay, augdistiller, dotshielding, dr, clicktype, clicklevel2, elemdmgtype, elemdmgamt, endur, factionamt1, factionamt2, factionamt3, factionamt4, factionmod1, factionmod2, factionmod3, factionmod4, filename, focuseffect, fr, fvnodrop, haste, clicklevel, hp, regen, icon, idfile, itemclass, itemtype, ldonprice, ldontheme, ldonsold, light, lore, loregroup, magic, mana, manaregen, enduranceregen, material, herosforgemodel, maxcharges, mr, nodrop, norent, pendingloreflag, pr, procrate, races, ` + "`" + `range` + "`" + `, reclevel, recskill, reqlevel, sellrate, shielding, size, skillmodtype, skillmodvalue, slots, clickeffect, spellshield, strikethrough, stunresist, summonedflag, tradeskills, favor, weight, unk012, unk013, benefitflag, unk054, unk059, booktype, recastdelay, recasttype, guildfavor, unk123, unk124, attuneable, nopet, updated, comment, unk127, pointtype, potionbelt, potionbeltslots, stacksize, notransfer, stackable, unk134, unk137, proceffect, proctype, proclevel2, proclevel, unk142, worneffect, worntype, wornlevel2, wornlevel, unk147, focustype, focuslevel2, focuslevel, unk152, scrolleffect, scrolltype, scrolllevel2, scrolllevel, unk157, serialized, verified, serialization, source, unk033, lorefile, unk014, svcorruption, skillmodmax, unk060, augslot1unk2, augslot2unk2, augslot3unk2, augslot4unk2, augslot5unk2, augslot6unk2, unk120, unk121, questitemflag, unk132, clickunk5, clickunk6, clickunk7, procunk1, procunk2, procunk3, procunk4, procunk6, procunk7, wornunk1, wornunk2, wornunk3, wornunk4, wornunk5, wornunk6, wornunk7, focusunk1, focusunk2, focusunk3, focusunk4, focusunk5, focusunk6, focusunk7, scrollunk1, scrollunk2, scrollunk3, scrollunk4, scrollunk5, scrollunk6, scrollunk7, unk193, purity, evoitem, evoid, evolvinglevel, evomax, clickname, procname, wornname, focusname, scrollname, dsmitigation, heroic_str, heroic_int, heroic_wis, heroic_agi, heroic_dex, heroic_sta, heroic_cha, heroic_pr, heroic_dr, heroic_fr, heroic_cr, heroic_mr, heroic_svcorrup, healamt, spelldmg, clairvoyance, backstabdmg, created, elitematerial, ldonsellbackrate, scriptfileid, expendablearrow, powersourcecapacity, bardeffect, bardeffecttype, bardlevel2, bardlevel, bardunk1, bardunk2, bardunk3, bardunk4, bardunk5, bardname, bardunk7, unk214, subtype, unk220, unk221, heirloom, unk223, unk224, unk225, unk226, unk227, unk228, unk229, unk230, unk231, unk232, unk233, unk234, placeable, unk236, unk237, unk238, unk239, unk240, unk241, epicitem FROM items WHERE id = ? LIMIT 1
`

func (q *Queries) ItemByID(ctx context.Context, id int32) (Item, error) {
	row := q.db.QueryRowContext(ctx, itemByID, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Minstatus,
		&i.Name,
		&i.Aagi,
		&i.Ac,
		&i.Accuracy,
		&i.Acha,
		&i.Adex,
		&i.Aint,
		&i.Artifactflag,
		&i.Asta,
		&i.Astr,
		&i.Attack,
		&i.Augrestrict,
		&i.Augslot1type,
		&i.Augslot1visible,
		&i.Augslot2type,
		&i.Augslot2visible,
		&i.Augslot3type,
		&i.Augslot3visible,
		&i.Augslot4type,
		&i.Augslot4visible,
		&i.Augslot5type,
		&i.Augslot5visible,
		&i.Augslot6type,
		&i.Augslot6visible,
		&i.Augtype,
		&i.Avoidance,
		&i.Awis,
		&i.Bagsize,
		&i.Bagslots,
		&i.Bagtype,
		&i.Bagwr,
		&i.Banedmgamt,
		&i.Banedmgraceamt,
		&i.Banedmgbody,
		&i.Banedmgrace,
		&i.Bardtype,
		&i.Bardvalue,
		&i.Book,
		&i.Casttime,
		&i.CastTime2,
		&i.Charmfile,
		&i.Charmfileid,
		&i.Classes,
		&i.Color,
		&i.Combateffects,
		&i.Extradmgskill,
		&i.Extradmgamt,
		&i.Price,
		&i.Cr,
		&i.Damage,
		&i.Damageshield,
		&i.Deity,
		&i.Delay,
		&i.Augdistiller,
		&i.Dotshielding,
		&i.Dr,
		&i.Clicktype,
		&i.Clicklevel2,
		&i.Elemdmgtype,
		&i.Elemdmgamt,
		&i.Endur,
		&i.Factionamt1,
		&i.Factionamt2,
		&i.Factionamt3,
		&i.Factionamt4,
		&i.Factionmod1,
		&i.Factionmod2,
		&i.Factionmod3,
		&i.Factionmod4,
		&i.Filename,
		&i.Focuseffect,
		&i.Fr,
		&i.Fvnodrop,
		&i.Haste,
		&i.Clicklevel,
		&i.Hp,
		&i.Regen,
		&i.Icon,
		&i.Idfile,
		&i.Itemclass,
		&i.Itemtype,
		&i.Ldonprice,
		&i.Ldontheme,
		&i.Ldonsold,
		&i.Light,
		&i.Lore,
		&i.Loregroup,
		&i.Magic,
		&i.Mana,
		&i.Manaregen,
		&i.Enduranceregen,
		&i.Material,
		&i.Herosforgemodel,
		&i.Maxcharges,
		&i.Mr,
		&i.Nodrop,
		&i.Norent,
		&i.Pendingloreflag,
		&i.Pr,
		&i.Procrate,
		&i.Races,
		&i.Range,
		&i.Reclevel,
		&i.Recskill,
		&i.Reqlevel,
		&i.Sellrate,
		&i.Shielding,
		&i.Size,
		&i.Skillmodtype,
		&i.Skillmodvalue,
		&i.Slots,
		&i.Clickeffect,
		&i.Spellshield,
		&i.Strikethrough,
		&i.Stunresist,
		&i.Summonedflag,
		&i.Tradeskills,
		&i.Favor,
		&i.Weight,
		&i.Unk012,
		&i.Unk013,
		&i.Benefitflag,
		&i.Unk054,
		&i.Unk059,
		&i.Booktype,
		&i.Recastdelay,
		&i.Recasttype,
		&i.Guildfavor,
		&i.Unk123,
		&i.Unk124,
		&i.Attuneable,
		&i.Nopet,
		&i.Updated,
		&i.Comment,
		&i.Unk127,
		&i.Pointtype,
		&i.Potionbelt,
		&i.Potionbeltslots,
		&i.Stacksize,
		&i.Notransfer,
		&i.Stackable,
		&i.Unk134,
		&i.Unk137,
		&i.Proceffect,
		&i.Proctype,
		&i.Proclevel2,
		&i.Proclevel,
		&i.Unk142,
		&i.Worneffect,
		&i.Worntype,
		&i.Wornlevel2,
		&i.Wornlevel,
		&i.Unk147,
		&i.Focustype,
		&i.Focuslevel2,
		&i.Focuslevel,
		&i.Unk152,
		&i.Scrolleffect,
		&i.Scrolltype,
		&i.Scrolllevel2,
		&i.Scrolllevel,
		&i.Unk157,
		&i.Serialized,
		&i.Verified,
		&i.Serialization,
		&i.Source,
		&i.Unk033,
		&i.Lorefile,
		&i.Unk014,
		&i.Svcorruption,
		&i.Skillmodmax,
		&i.Unk060,
		&i.Augslot1unk2,
		&i.Augslot2unk2,
		&i.Augslot3unk2,
		&i.Augslot4unk2,
		&i.Augslot5unk2,
		&i.Augslot6unk2,
		&i.Unk120,
		&i.Unk121,
		&i.Questitemflag,
		&i.Unk132,
		&i.Clickunk5,
		&i.Clickunk6,
		&i.Clickunk7,
		&i.Procunk1,
		&i.Procunk2,
		&i.Procunk3,
		&i.Procunk4,
		&i.Procunk6,
		&i.Procunk7,
		&i.Wornunk1,
		&i.Wornunk2,
		&i.Wornunk3,
		&i.Wornunk4,
		&i.Wornunk5,
		&i.Wornunk6,
		&i.Wornunk7,
		&i.Focusunk1,
		&i.Focusunk2,
		&i.Focusunk3,
		&i.Focusunk4,
		&i.Focusunk5,
		&i.Focusunk6,
		&i.Focusunk7,
		&i.Scrollunk1,
		&i.Scrollunk2,
		&i.Scrollunk3,
		&i.Scrollunk4,
		&i.Scrollunk5,
		&i.Scrollunk6,
		&i.Scrollunk7,
		&i.Unk193,
		&i.Purity,
		&i.Evoitem,
		&i.Evoid,
		&i.Evolvinglevel,
		&i.Evomax,
		&i.Clickname,
		&i.Procname,
		&i.Wornname,
		&i.Focusname,
		&i.Scrollname,
		&i.Dsmitigation,
		&i.HeroicStr,
		&i.HeroicInt,
		&i.HeroicWis,
		&i.HeroicAgi,
		&i.HeroicDex,
		&i.HeroicSta,
		&i.HeroicCha,
		&i.HeroicPr,
		&i.HeroicDr,
		&i.HeroicFr,
		&i.HeroicCr,
		&i.HeroicMr,
		&i.HeroicSvcorrup,
		&i.Healamt,
		&i.Spelldmg,
		&i.Clairvoyance,
		&i.Backstabdmg,
		&i.Created,
		&i.Elitematerial,
		&i.Ldonsellbackrate,
		&i.Scriptfileid,
		&i.Expendablearrow,
		&i.Powersourcecapacity,
		&i.Bardeffect,
		&i.Bardeffecttype,
		&i.Bardlevel2,
		&i.Bardlevel,
		&i.Bardunk1,
		&i.Bardunk2,
		&i.Bardunk3,
		&i.Bardunk4,
		&i.Bardunk5,
		&i.Bardname,
		&i.Bardunk7,
		&i.Unk214,
		&i.Subtype,
		&i.Unk220,
		&i.Unk221,
		&i.Heirloom,
		&i.Unk223,
		&i.Unk224,
		&i.Unk225,
		&i.Unk226,
		&i.Unk227,
		&i.Unk228,
		&i.Unk229,
		&i.Unk230,
		&i.Unk231,
		&i.Unk232,
		&i.Unk233,
		&i.Unk234,
		&i.Placeable,
		&i.Unk236,
		&i.Unk237,
		&i.Unk238,
		&i.Unk239,
		&i.Unk240,
		&i.Unk241,
		&i.Epicitem,
	)
	return i, err
}

const itemDiscoveredOnlyByID = `-- name: ItemDiscoveredOnlyByID :one
SELECT id, minstatus, name, aagi, ac, accuracy, acha, adex, aint, artifactflag, asta, astr, attack, augrestrict, augslot1type, augslot1visible, augslot2type, augslot2visible, augslot3type, augslot3visible, augslot4type, augslot4visible, augslot5type, augslot5visible, augslot6type, augslot6visible, augtype, avoidance, awis, bagsize, bagslots, bagtype, bagwr, banedmgamt, banedmgraceamt, banedmgbody, banedmgrace, bardtype, bardvalue, book, casttime, casttime_, charmfile, charmfileid, classes, color, combateffects, extradmgskill, extradmgamt, price, cr, damage, damageshield, deity, delay, augdistiller, dotshielding, dr, clicktype, clicklevel2, elemdmgtype, elemdmgamt, endur, factionamt1, factionamt2, factionamt3, factionamt4, factionmod1, factionmod2, factionmod3, factionmod4, filename, focuseffect, fr, fvnodrop, haste, clicklevel, hp, regen, icon, idfile, itemclass, itemtype, ldonprice, ldontheme, ldonsold, light, lore, loregroup, magic, mana, manaregen, enduranceregen, material, herosforgemodel, maxcharges, mr, nodrop, norent, pendingloreflag, pr, procrate, races, ` + "`" + `range` + "`" + `, reclevel, recskill, reqlevel, sellrate, shielding, size, skillmodtype, skillmodvalue, slots, clickeffect, spellshield, strikethrough, stunresist, summonedflag, tradeskills, favor, weight, unk012, unk013, benefitflag, unk054, unk059, booktype, recastdelay, recasttype, guildfavor, unk123, unk124, attuneable, nopet, updated, comment, unk127, pointtype, potionbelt, potionbeltslots, stacksize, notransfer, stackable, unk134, unk137, proceffect, proctype, proclevel2, proclevel, unk142, worneffect, worntype, wornlevel2, wornlevel, unk147, focustype, focuslevel2, focuslevel, unk152, scrolleffect, scrolltype, scrolllevel2, scrolllevel, unk157, serialized, verified, serialization, source, unk033, lorefile, unk014, svcorruption, skillmodmax, unk060, augslot1unk2, augslot2unk2, augslot3unk2, augslot4unk2, augslot5unk2, augslot6unk2, unk120, unk121, questitemflag, unk132, clickunk5, clickunk6, clickunk7, procunk1, procunk2, procunk3, procunk4, procunk6, procunk7, wornunk1, wornunk2, wornunk3, wornunk4, wornunk5, wornunk6, wornunk7, focusunk1, focusunk2, focusunk3, focusunk4, focusunk5, focusunk6, focusunk7, scrollunk1, scrollunk2, scrollunk3, scrollunk4, scrollunk5, scrollunk6, scrollunk7, unk193, purity, evoitem, evoid, evolvinglevel, evomax, clickname, procname, wornname, focusname, scrollname, dsmitigation, heroic_str, heroic_int, heroic_wis, heroic_agi, heroic_dex, heroic_sta, heroic_cha, heroic_pr, heroic_dr, heroic_fr, heroic_cr, heroic_mr, heroic_svcorrup, healamt, spelldmg, clairvoyance, backstabdmg, created, elitematerial, ldonsellbackrate, scriptfileid, expendablearrow, powersourcecapacity, bardeffect, bardeffecttype, bardlevel2, bardlevel, bardunk1, bardunk2, bardunk3, bardunk4, bardunk5, bardname, bardunk7, unk214, subtype, unk220, unk221, heirloom, unk223, unk224, unk225, unk226, unk227, unk228, unk229, unk230, unk231, unk232, unk233, unk234, placeable, unk236, unk237, unk238, unk239, unk240, unk241, epicitem, item_id, char_name, discovered_date, account_status FROM items i, discovered_items di WHERE i.id=di.id AND di.item_id=? LIMIT 1
`

type ItemDiscoveredOnlyByIDRow struct {
	ID                  int32
	Minstatus           int16
	Name                string
	Aagi                int32
	Ac                  int32
	Accuracy            int32
	Acha                int32
	Adex                int32
	Aint                int32
	Artifactflag        uint8
	Asta                int32
	Astr                int32
	Attack              int32
	Augrestrict         int32
	Augslot1type        int8
	Augslot1visible     int8
	Augslot2type        int8
	Augslot2visible     int8
	Augslot3type        int8
	Augslot3visible     int8
	Augslot4type        int8
	Augslot4visible     int8
	Augslot5type        int8
	Augslot5visible     int8
	Augslot6type        int8
	Augslot6visible     int8
	Augtype             int32
	Avoidance           int32
	Awis                int32
	Bagsize             int32
	Bagslots            int32
	Bagtype             int32
	Bagwr               int32
	Banedmgamt          int32
	Banedmgraceamt      int32
	Banedmgbody         int32
	Banedmgrace         int32
	Bardtype            int32
	Bardvalue           int32
	Book                int32
	Casttime            int32
	CastTime2           int32
	Charmfile           string
	Charmfileid         string
	Classes             int32
	Color               uint32
	Combateffects       string
	Extradmgskill       int32
	Extradmgamt         int32
	Price               int32
	Cr                  int32
	Damage              int32
	Damageshield        int32
	Deity               int32
	Delay               int32
	Augdistiller        uint32
	Dotshielding        int32
	Dr                  int32
	Clicktype           int32
	Clicklevel2         int32
	Elemdmgtype         int32
	Elemdmgamt          int32
	Endur               int32
	Factionamt1         int32
	Factionamt2         int32
	Factionamt3         int32
	Factionamt4         int32
	Factionmod1         int32
	Factionmod2         int32
	Factionmod3         int32
	Factionmod4         int32
	Filename            string
	Focuseffect         int32
	Fr                  int32
	Fvnodrop            int32
	Haste               int32
	Clicklevel          int32
	Hp                  int32
	Regen               int32
	Icon                int32
	Idfile              string
	Itemclass           int32
	Itemtype            int32
	Ldonprice           int32
	Ldontheme           int32
	Ldonsold            int32
	Light               int32
	Lore                string
	Loregroup           int32
	Magic               int32
	Mana                int32
	Manaregen           int32
	Enduranceregen      int32
	Material            int32
	Herosforgemodel     int32
	Maxcharges          int32
	Mr                  int32
	Nodrop              int32
	Norent              int32
	Pendingloreflag     uint8
	Pr                  int32
	Procrate            int32
	Races               int32
	Range               int32
	Reclevel            int32
	Recskill            int32
	Reqlevel            int32
	Sellrate            float64
	Shielding           int32
	Size                int32
	Skillmodtype        int32
	Skillmodvalue       int32
	Slots               int32
	Clickeffect         int32
	Spellshield         int32
	Strikethrough       int32
	Stunresist          int32
	Summonedflag        uint8
	Tradeskills         int32
	Favor               int32
	Weight              int32
	Unk012              int32
	Unk013              int32
	Benefitflag         int32
	Unk054              int32
	Unk059              int32
	Booktype            int32
	Recastdelay         int32
	Recasttype          int32
	Guildfavor          int32
	Unk123              int32
	Unk124              int32
	Attuneable          int32
	Nopet               int32
	Updated             sql.NullTime
	Comment             string
	Unk127              int32
	Pointtype           int32
	Potionbelt          int32
	Potionbeltslots     int32
	Stacksize           int32
	Notransfer          int32
	Stackable           int32
	Unk134              string
	Unk137              int32
	Proceffect          int32
	Proctype            int32
	Proclevel2          int32
	Proclevel           int32
	Unk142              int32
	Worneffect          int32
	Worntype            int32
	Wornlevel2          int32
	Wornlevel           int32
	Unk147              int32
	Focustype           int32
	Focuslevel2         int32
	Focuslevel          int32
	Unk152              int32
	Scrolleffect        int32
	Scrolltype          int32
	Scrolllevel2        int32
	Scrolllevel         int32
	Unk157              int32
	Serialized          sql.NullTime
	Verified            sql.NullTime
	Serialization       sql.NullString
	Source              string
	Unk033              int32
	Lorefile            string
	Unk014              int32
	Svcorruption        int32
	Skillmodmax         int32
	Unk060              int32
	Augslot1unk2        int32
	Augslot2unk2        int32
	Augslot3unk2        int32
	Augslot4unk2        int32
	Augslot5unk2        int32
	Augslot6unk2        int32
	Unk120              int32
	Unk121              int32
	Questitemflag       int32
	Unk132              sql.NullString
	Clickunk5           int32
	Clickunk6           string
	Clickunk7           int32
	Procunk1            int32
	Procunk2            int32
	Procunk3            int32
	Procunk4            int32
	Procunk6            string
	Procunk7            int32
	Wornunk1            int32
	Wornunk2            int32
	Wornunk3            int32
	Wornunk4            int32
	Wornunk5            int32
	Wornunk6            string
	Wornunk7            int32
	Focusunk1           int32
	Focusunk2           int32
	Focusunk3           int32
	Focusunk4           int32
	Focusunk5           int32
	Focusunk6           string
	Focusunk7           int32
	Scrollunk1          uint32
	Scrollunk2          int32
	Scrollunk3          int32
	Scrollunk4          int32
	Scrollunk5          int32
	Scrollunk6          string
	Scrollunk7          int32
	Unk193              int32
	Purity              int32
	Evoitem             int32
	Evoid               int32
	Evolvinglevel       int32
	Evomax              int32
	Clickname           string
	Procname            string
	Wornname            string
	Focusname           string
	Scrollname          string
	Dsmitigation        int16
	HeroicStr           int16
	HeroicInt           int16
	HeroicWis           int16
	HeroicAgi           int16
	HeroicDex           int16
	HeroicSta           int16
	HeroicCha           int16
	HeroicPr            int16
	HeroicDr            int16
	HeroicFr            int16
	HeroicCr            int16
	HeroicMr            int16
	HeroicSvcorrup      int16
	Healamt             int16
	Spelldmg            int16
	Clairvoyance        int16
	Backstabdmg         int16
	Created             string
	Elitematerial       int16
	Ldonsellbackrate    int16
	Scriptfileid        int32
	Expendablearrow     int16
	Powersourcecapacity int32
	Bardeffect          int32
	Bardeffecttype      int16
	Bardlevel2          int16
	Bardlevel           int16
	Bardunk1            int16
	Bardunk2            int16
	Bardunk3            int16
	Bardunk4            int16
	Bardunk5            int16
	Bardname            string
	Bardunk7            int16
	Unk214              int16
	Subtype             int32
	Unk220              int32
	Unk221              int32
	Heirloom            int32
	Unk223              int32
	Unk224              int32
	Unk225              int32
	Unk226              int32
	Unk227              int32
	Unk228              int32
	Unk229              int32
	Unk230              int32
	Unk231              int32
	Unk232              int32
	Unk233              int32
	Unk234              int32
	Placeable           int32
	Unk236              int32
	Unk237              int32
	Unk238              int32
	Unk239              int32
	Unk240              int32
	Unk241              int32
	Epicitem            int32
	ItemID              uint32
	CharName            string
	DiscoveredDate      uint32
	AccountStatus       int32
}

func (q *Queries) ItemDiscoveredOnlyByID(ctx context.Context, itemID uint32) (ItemDiscoveredOnlyByIDRow, error) {
	row := q.db.QueryRowContext(ctx, itemDiscoveredOnlyByID, itemID)
	var i ItemDiscoveredOnlyByIDRow
	err := row.Scan(
		&i.ID,
		&i.Minstatus,
		&i.Name,
		&i.Aagi,
		&i.Ac,
		&i.Accuracy,
		&i.Acha,
		&i.Adex,
		&i.Aint,
		&i.Artifactflag,
		&i.Asta,
		&i.Astr,
		&i.Attack,
		&i.Augrestrict,
		&i.Augslot1type,
		&i.Augslot1visible,
		&i.Augslot2type,
		&i.Augslot2visible,
		&i.Augslot3type,
		&i.Augslot3visible,
		&i.Augslot4type,
		&i.Augslot4visible,
		&i.Augslot5type,
		&i.Augslot5visible,
		&i.Augslot6type,
		&i.Augslot6visible,
		&i.Augtype,
		&i.Avoidance,
		&i.Awis,
		&i.Bagsize,
		&i.Bagslots,
		&i.Bagtype,
		&i.Bagwr,
		&i.Banedmgamt,
		&i.Banedmgraceamt,
		&i.Banedmgbody,
		&i.Banedmgrace,
		&i.Bardtype,
		&i.Bardvalue,
		&i.Book,
		&i.Casttime,
		&i.CastTime2,
		&i.Charmfile,
		&i.Charmfileid,
		&i.Classes,
		&i.Color,
		&i.Combateffects,
		&i.Extradmgskill,
		&i.Extradmgamt,
		&i.Price,
		&i.Cr,
		&i.Damage,
		&i.Damageshield,
		&i.Deity,
		&i.Delay,
		&i.Augdistiller,
		&i.Dotshielding,
		&i.Dr,
		&i.Clicktype,
		&i.Clicklevel2,
		&i.Elemdmgtype,
		&i.Elemdmgamt,
		&i.Endur,
		&i.Factionamt1,
		&i.Factionamt2,
		&i.Factionamt3,
		&i.Factionamt4,
		&i.Factionmod1,
		&i.Factionmod2,
		&i.Factionmod3,
		&i.Factionmod4,
		&i.Filename,
		&i.Focuseffect,
		&i.Fr,
		&i.Fvnodrop,
		&i.Haste,
		&i.Clicklevel,
		&i.Hp,
		&i.Regen,
		&i.Icon,
		&i.Idfile,
		&i.Itemclass,
		&i.Itemtype,
		&i.Ldonprice,
		&i.Ldontheme,
		&i.Ldonsold,
		&i.Light,
		&i.Lore,
		&i.Loregroup,
		&i.Magic,
		&i.Mana,
		&i.Manaregen,
		&i.Enduranceregen,
		&i.Material,
		&i.Herosforgemodel,
		&i.Maxcharges,
		&i.Mr,
		&i.Nodrop,
		&i.Norent,
		&i.Pendingloreflag,
		&i.Pr,
		&i.Procrate,
		&i.Races,
		&i.Range,
		&i.Reclevel,
		&i.Recskill,
		&i.Reqlevel,
		&i.Sellrate,
		&i.Shielding,
		&i.Size,
		&i.Skillmodtype,
		&i.Skillmodvalue,
		&i.Slots,
		&i.Clickeffect,
		&i.Spellshield,
		&i.Strikethrough,
		&i.Stunresist,
		&i.Summonedflag,
		&i.Tradeskills,
		&i.Favor,
		&i.Weight,
		&i.Unk012,
		&i.Unk013,
		&i.Benefitflag,
		&i.Unk054,
		&i.Unk059,
		&i.Booktype,
		&i.Recastdelay,
		&i.Recasttype,
		&i.Guildfavor,
		&i.Unk123,
		&i.Unk124,
		&i.Attuneable,
		&i.Nopet,
		&i.Updated,
		&i.Comment,
		&i.Unk127,
		&i.Pointtype,
		&i.Potionbelt,
		&i.Potionbeltslots,
		&i.Stacksize,
		&i.Notransfer,
		&i.Stackable,
		&i.Unk134,
		&i.Unk137,
		&i.Proceffect,
		&i.Proctype,
		&i.Proclevel2,
		&i.Proclevel,
		&i.Unk142,
		&i.Worneffect,
		&i.Worntype,
		&i.Wornlevel2,
		&i.Wornlevel,
		&i.Unk147,
		&i.Focustype,
		&i.Focuslevel2,
		&i.Focuslevel,
		&i.Unk152,
		&i.Scrolleffect,
		&i.Scrolltype,
		&i.Scrolllevel2,
		&i.Scrolllevel,
		&i.Unk157,
		&i.Serialized,
		&i.Verified,
		&i.Serialization,
		&i.Source,
		&i.Unk033,
		&i.Lorefile,
		&i.Unk014,
		&i.Svcorruption,
		&i.Skillmodmax,
		&i.Unk060,
		&i.Augslot1unk2,
		&i.Augslot2unk2,
		&i.Augslot3unk2,
		&i.Augslot4unk2,
		&i.Augslot5unk2,
		&i.Augslot6unk2,
		&i.Unk120,
		&i.Unk121,
		&i.Questitemflag,
		&i.Unk132,
		&i.Clickunk5,
		&i.Clickunk6,
		&i.Clickunk7,
		&i.Procunk1,
		&i.Procunk2,
		&i.Procunk3,
		&i.Procunk4,
		&i.Procunk6,
		&i.Procunk7,
		&i.Wornunk1,
		&i.Wornunk2,
		&i.Wornunk3,
		&i.Wornunk4,
		&i.Wornunk5,
		&i.Wornunk6,
		&i.Wornunk7,
		&i.Focusunk1,
		&i.Focusunk2,
		&i.Focusunk3,
		&i.Focusunk4,
		&i.Focusunk5,
		&i.Focusunk6,
		&i.Focusunk7,
		&i.Scrollunk1,
		&i.Scrollunk2,
		&i.Scrollunk3,
		&i.Scrollunk4,
		&i.Scrollunk5,
		&i.Scrollunk6,
		&i.Scrollunk7,
		&i.Unk193,
		&i.Purity,
		&i.Evoitem,
		&i.Evoid,
		&i.Evolvinglevel,
		&i.Evomax,
		&i.Clickname,
		&i.Procname,
		&i.Wornname,
		&i.Focusname,
		&i.Scrollname,
		&i.Dsmitigation,
		&i.HeroicStr,
		&i.HeroicInt,
		&i.HeroicWis,
		&i.HeroicAgi,
		&i.HeroicDex,
		&i.HeroicSta,
		&i.HeroicCha,
		&i.HeroicPr,
		&i.HeroicDr,
		&i.HeroicFr,
		&i.HeroicCr,
		&i.HeroicMr,
		&i.HeroicSvcorrup,
		&i.Healamt,
		&i.Spelldmg,
		&i.Clairvoyance,
		&i.Backstabdmg,
		&i.Created,
		&i.Elitematerial,
		&i.Ldonsellbackrate,
		&i.Scriptfileid,
		&i.Expendablearrow,
		&i.Powersourcecapacity,
		&i.Bardeffect,
		&i.Bardeffecttype,
		&i.Bardlevel2,
		&i.Bardlevel,
		&i.Bardunk1,
		&i.Bardunk2,
		&i.Bardunk3,
		&i.Bardunk4,
		&i.Bardunk5,
		&i.Bardname,
		&i.Bardunk7,
		&i.Unk214,
		&i.Subtype,
		&i.Unk220,
		&i.Unk221,
		&i.Heirloom,
		&i.Unk223,
		&i.Unk224,
		&i.Unk225,
		&i.Unk226,
		&i.Unk227,
		&i.Unk228,
		&i.Unk229,
		&i.Unk230,
		&i.Unk231,
		&i.Unk232,
		&i.Unk233,
		&i.Unk234,
		&i.Placeable,
		&i.Unk236,
		&i.Unk237,
		&i.Unk238,
		&i.Unk239,
		&i.Unk240,
		&i.Unk241,
		&i.Epicitem,
		&i.ItemID,
		&i.CharName,
		&i.DiscoveredDate,
		&i.AccountStatus,
	)
	return i, err
}

const itemRecipeAll = `-- name: ItemRecipeAll :many
SELECT tr.id recipe_id, tr.name recipe_name, 
tr.tradeskill, tr.trivial, tre.item_id, tre.iscontainer is_container,
tre.componentcount component_count, tre.successcount success_count
FROM tradeskill_recipe tr, tradeskill_recipe_entries tre
WHERE tr.id = tre.recipe_id
AND tr.enabled = 1
AND tre.componentcount > 0
ORDER by tre.item_id ASC
`

type ItemRecipeAllRow struct {
	RecipeID       int32
	RecipeName     string
	Tradeskill     int16
	Trivial        int16
	ItemID         int32
	IsContainer    bool
	ComponentCount int8
	SuccessCount   int8
}

func (q *Queries) ItemRecipeAll(ctx context.Context) ([]ItemRecipeAllRow, error) {
	rows, err := q.db.QueryContext(ctx, itemRecipeAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemRecipeAllRow
	for rows.Next() {
		var i ItemRecipeAllRow
		if err := rows.Scan(
			&i.RecipeID,
			&i.RecipeName,
			&i.Tradeskill,
			&i.Trivial,
			&i.ItemID,
			&i.IsContainer,
			&i.ComponentCount,
			&i.SuccessCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const itemSearchByName = `-- name: ItemSearchByName :many
SELECT id, minstatus, name, aagi, ac, accuracy, acha, adex, aint, artifactflag, asta, astr, attack, augrestrict, augslot1type, augslot1visible, augslot2type, augslot2visible, augslot3type, augslot3visible, augslot4type, augslot4visible, augslot5type, augslot5visible, augslot6type, augslot6visible, augtype, avoidance, awis, bagsize, bagslots, bagtype, bagwr, banedmgamt, banedmgraceamt, banedmgbody, banedmgrace, bardtype, bardvalue, book, casttime, casttime_, charmfile, charmfileid, classes, color, combateffects, extradmgskill, extradmgamt, price, cr, damage, damageshield, deity, delay, augdistiller, dotshielding, dr, clicktype, clicklevel2, elemdmgtype, elemdmgamt, endur, factionamt1, factionamt2, factionamt3, factionamt4, factionmod1, factionmod2, factionmod3, factionmod4, filename, focuseffect, fr, fvnodrop, haste, clicklevel, hp, regen, icon, idfile, itemclass, itemtype, ldonprice, ldontheme, ldonsold, light, lore, loregroup, magic, mana, manaregen, enduranceregen, material, herosforgemodel, maxcharges, mr, nodrop, norent, pendingloreflag, pr, procrate, races, ` + "`" + `range` + "`" + `, reclevel, recskill, reqlevel, sellrate, shielding, size, skillmodtype, skillmodvalue, slots, clickeffect, spellshield, strikethrough, stunresist, summonedflag, tradeskills, favor, weight, unk012, unk013, benefitflag, unk054, unk059, booktype, recastdelay, recasttype, guildfavor, unk123, unk124, attuneable, nopet, updated, comment, unk127, pointtype, potionbelt, potionbeltslots, stacksize, notransfer, stackable, unk134, unk137, proceffect, proctype, proclevel2, proclevel, unk142, worneffect, worntype, wornlevel2, wornlevel, unk147, focustype, focuslevel2, focuslevel, unk152, scrolleffect, scrolltype, scrolllevel2, scrolllevel, unk157, serialized, verified, serialization, source, unk033, lorefile, unk014, svcorruption, skillmodmax, unk060, augslot1unk2, augslot2unk2, augslot3unk2, augslot4unk2, augslot5unk2, augslot6unk2, unk120, unk121, questitemflag, unk132, clickunk5, clickunk6, clickunk7, procunk1, procunk2, procunk3, procunk4, procunk6, procunk7, wornunk1, wornunk2, wornunk3, wornunk4, wornunk5, wornunk6, wornunk7, focusunk1, focusunk2, focusunk3, focusunk4, focusunk5, focusunk6, focusunk7, scrollunk1, scrollunk2, scrollunk3, scrollunk4, scrollunk5, scrollunk6, scrollunk7, unk193, purity, evoitem, evoid, evolvinglevel, evomax, clickname, procname, wornname, focusname, scrollname, dsmitigation, heroic_str, heroic_int, heroic_wis, heroic_agi, heroic_dex, heroic_sta, heroic_cha, heroic_pr, heroic_dr, heroic_fr, heroic_cr, heroic_mr, heroic_svcorrup, healamt, spelldmg, clairvoyance, backstabdmg, created, elitematerial, ldonsellbackrate, scriptfileid, expendablearrow, powersourcecapacity, bardeffect, bardeffecttype, bardlevel2, bardlevel, bardunk1, bardunk2, bardunk3, bardunk4, bardunk5, bardname, bardunk7, unk214, subtype, unk220, unk221, heirloom, unk223, unk224, unk225, unk226, unk227, unk228, unk229, unk230, unk231, unk232, unk233, unk234, placeable, unk236, unk237, unk238, unk239, unk240, unk241, epicitem FROM items WHERE ` + "`" + `name` + "`" + ` LIKE ? ORDER BY ` + "`" + `name` + "`" + ` ASC
`

func (q *Queries) ItemSearchByName(ctx context.Context, name string) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, itemSearchByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Minstatus,
			&i.Name,
			&i.Aagi,
			&i.Ac,
			&i.Accuracy,
			&i.Acha,
			&i.Adex,
			&i.Aint,
			&i.Artifactflag,
			&i.Asta,
			&i.Astr,
			&i.Attack,
			&i.Augrestrict,
			&i.Augslot1type,
			&i.Augslot1visible,
			&i.Augslot2type,
			&i.Augslot2visible,
			&i.Augslot3type,
			&i.Augslot3visible,
			&i.Augslot4type,
			&i.Augslot4visible,
			&i.Augslot5type,
			&i.Augslot5visible,
			&i.Augslot6type,
			&i.Augslot6visible,
			&i.Augtype,
			&i.Avoidance,
			&i.Awis,
			&i.Bagsize,
			&i.Bagslots,
			&i.Bagtype,
			&i.Bagwr,
			&i.Banedmgamt,
			&i.Banedmgraceamt,
			&i.Banedmgbody,
			&i.Banedmgrace,
			&i.Bardtype,
			&i.Bardvalue,
			&i.Book,
			&i.Casttime,
			&i.CastTime2,
			&i.Charmfile,
			&i.Charmfileid,
			&i.Classes,
			&i.Color,
			&i.Combateffects,
			&i.Extradmgskill,
			&i.Extradmgamt,
			&i.Price,
			&i.Cr,
			&i.Damage,
			&i.Damageshield,
			&i.Deity,
			&i.Delay,
			&i.Augdistiller,
			&i.Dotshielding,
			&i.Dr,
			&i.Clicktype,
			&i.Clicklevel2,
			&i.Elemdmgtype,
			&i.Elemdmgamt,
			&i.Endur,
			&i.Factionamt1,
			&i.Factionamt2,
			&i.Factionamt3,
			&i.Factionamt4,
			&i.Factionmod1,
			&i.Factionmod2,
			&i.Factionmod3,
			&i.Factionmod4,
			&i.Filename,
			&i.Focuseffect,
			&i.Fr,
			&i.Fvnodrop,
			&i.Haste,
			&i.Clicklevel,
			&i.Hp,
			&i.Regen,
			&i.Icon,
			&i.Idfile,
			&i.Itemclass,
			&i.Itemtype,
			&i.Ldonprice,
			&i.Ldontheme,
			&i.Ldonsold,
			&i.Light,
			&i.Lore,
			&i.Loregroup,
			&i.Magic,
			&i.Mana,
			&i.Manaregen,
			&i.Enduranceregen,
			&i.Material,
			&i.Herosforgemodel,
			&i.Maxcharges,
			&i.Mr,
			&i.Nodrop,
			&i.Norent,
			&i.Pendingloreflag,
			&i.Pr,
			&i.Procrate,
			&i.Races,
			&i.Range,
			&i.Reclevel,
			&i.Recskill,
			&i.Reqlevel,
			&i.Sellrate,
			&i.Shielding,
			&i.Size,
			&i.Skillmodtype,
			&i.Skillmodvalue,
			&i.Slots,
			&i.Clickeffect,
			&i.Spellshield,
			&i.Strikethrough,
			&i.Stunresist,
			&i.Summonedflag,
			&i.Tradeskills,
			&i.Favor,
			&i.Weight,
			&i.Unk012,
			&i.Unk013,
			&i.Benefitflag,
			&i.Unk054,
			&i.Unk059,
			&i.Booktype,
			&i.Recastdelay,
			&i.Recasttype,
			&i.Guildfavor,
			&i.Unk123,
			&i.Unk124,
			&i.Attuneable,
			&i.Nopet,
			&i.Updated,
			&i.Comment,
			&i.Unk127,
			&i.Pointtype,
			&i.Potionbelt,
			&i.Potionbeltslots,
			&i.Stacksize,
			&i.Notransfer,
			&i.Stackable,
			&i.Unk134,
			&i.Unk137,
			&i.Proceffect,
			&i.Proctype,
			&i.Proclevel2,
			&i.Proclevel,
			&i.Unk142,
			&i.Worneffect,
			&i.Worntype,
			&i.Wornlevel2,
			&i.Wornlevel,
			&i.Unk147,
			&i.Focustype,
			&i.Focuslevel2,
			&i.Focuslevel,
			&i.Unk152,
			&i.Scrolleffect,
			&i.Scrolltype,
			&i.Scrolllevel2,
			&i.Scrolllevel,
			&i.Unk157,
			&i.Serialized,
			&i.Verified,
			&i.Serialization,
			&i.Source,
			&i.Unk033,
			&i.Lorefile,
			&i.Unk014,
			&i.Svcorruption,
			&i.Skillmodmax,
			&i.Unk060,
			&i.Augslot1unk2,
			&i.Augslot2unk2,
			&i.Augslot3unk2,
			&i.Augslot4unk2,
			&i.Augslot5unk2,
			&i.Augslot6unk2,
			&i.Unk120,
			&i.Unk121,
			&i.Questitemflag,
			&i.Unk132,
			&i.Clickunk5,
			&i.Clickunk6,
			&i.Clickunk7,
			&i.Procunk1,
			&i.Procunk2,
			&i.Procunk3,
			&i.Procunk4,
			&i.Procunk6,
			&i.Procunk7,
			&i.Wornunk1,
			&i.Wornunk2,
			&i.Wornunk3,
			&i.Wornunk4,
			&i.Wornunk5,
			&i.Wornunk6,
			&i.Wornunk7,
			&i.Focusunk1,
			&i.Focusunk2,
			&i.Focusunk3,
			&i.Focusunk4,
			&i.Focusunk5,
			&i.Focusunk6,
			&i.Focusunk7,
			&i.Scrollunk1,
			&i.Scrollunk2,
			&i.Scrollunk3,
			&i.Scrollunk4,
			&i.Scrollunk5,
			&i.Scrollunk6,
			&i.Scrollunk7,
			&i.Unk193,
			&i.Purity,
			&i.Evoitem,
			&i.Evoid,
			&i.Evolvinglevel,
			&i.Evomax,
			&i.Clickname,
			&i.Procname,
			&i.Wornname,
			&i.Focusname,
			&i.Scrollname,
			&i.Dsmitigation,
			&i.HeroicStr,
			&i.HeroicInt,
			&i.HeroicWis,
			&i.HeroicAgi,
			&i.HeroicDex,
			&i.HeroicSta,
			&i.HeroicCha,
			&i.HeroicPr,
			&i.HeroicDr,
			&i.HeroicFr,
			&i.HeroicCr,
			&i.HeroicMr,
			&i.HeroicSvcorrup,
			&i.Healamt,
			&i.Spelldmg,
			&i.Clairvoyance,
			&i.Backstabdmg,
			&i.Created,
			&i.Elitematerial,
			&i.Ldonsellbackrate,
			&i.Scriptfileid,
			&i.Expendablearrow,
			&i.Powersourcecapacity,
			&i.Bardeffect,
			&i.Bardeffecttype,
			&i.Bardlevel2,
			&i.Bardlevel,
			&i.Bardunk1,
			&i.Bardunk2,
			&i.Bardunk3,
			&i.Bardunk4,
			&i.Bardunk5,
			&i.Bardname,
			&i.Bardunk7,
			&i.Unk214,
			&i.Subtype,
			&i.Unk220,
			&i.Unk221,
			&i.Heirloom,
			&i.Unk223,
			&i.Unk224,
			&i.Unk225,
			&i.Unk226,
			&i.Unk227,
			&i.Unk228,
			&i.Unk229,
			&i.Unk230,
			&i.Unk231,
			&i.Unk232,
			&i.Unk233,
			&i.Unk234,
			&i.Placeable,
			&i.Unk236,
			&i.Unk237,
			&i.Unk238,
			&i.Unk239,
			&i.Unk240,
			&i.Unk241,
			&i.Epicitem,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const itemsAll = `-- name: ItemsAll :many
SELECT id, ` + "`" + `name` + "`" + `, ac, reqlevel, reclevel, hp, damage, delay, mana FROM items
`

type ItemsAllRow struct {
	ID       int32
	Name     string
	Ac       int32
	Reqlevel int32
	Reclevel int32
	Hp       int32
	Damage   int32
	Delay    int32
	Mana     int32
}

func (q *Queries) ItemsAll(ctx context.Context) ([]ItemsAllRow, error) {
	rows, err := q.db.QueryContext(ctx, itemsAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemsAllRow
	for rows.Next() {
		var i ItemsAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Ac,
			&i.Reqlevel,
			&i.Reclevel,
			&i.Hp,
			&i.Damage,
			&i.Delay,
			&i.Mana,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const npcByNpcID = `-- name: NpcByNpcID :one
SELECT id, name, lastname, level, race, class, bodytype, hp, mana, gender, texture, helmtexture, herosforgemodel, size, hp_regen_rate, hp_regen_per_second, mana_regen_rate, loottable_id, merchant_id, alt_currency_id, npc_spells_id, npc_spells_effects_id, npc_faction_id, adventure_template_id, trap_template, mindmg, maxdmg, attack_count, npcspecialattks, special_abilities, aggroradius, assistradius, face, luclin_hairstyle, luclin_haircolor, luclin_eyecolor, luclin_eyecolor2, luclin_beardcolor, luclin_beard, drakkin_heritage, drakkin_tattoo, drakkin_details, armortint_id, armortint_red, armortint_green, armortint_blue, d_melee_texture1, d_melee_texture2, ammo_idfile, prim_melee_type, sec_melee_type, ranged_type, runspeed, mr, cr, dr, fr, pr, corrup, phr, see_invis, see_invis_undead, qglobal, ac, npc_aggro, spawn_limit, attack_speed, attack_delay, findable, str, sta, dex, agi, _int, wis, cha, see_hide, see_improved_hide, trackable, isbot, exclude, atk, accuracy, avoidance, slow_mitigation, version, maxlevel, scalerate, private_corpse, unique_spawn_by_name, underwater, isquest, emoteid, spellscale, healscale, no_target_hotkey, raid_target, armtexture, bracertexture, handtexture, legtexture, feettexture, light, walkspeed, peqid, unique_, fixed, ignore_despawn, show_name, untargetable, charm_ac, charm_min_dmg, charm_max_dmg, charm_attack_delay, charm_accuracy_rating, charm_avoidance_rating, charm_atk, skip_global_loot, rare_spawn, stuck_behavior, model, flymode, always_aggro, exp_mod, heroic_strikethrough, faction_amount, keeps_sold_items FROM npc_types WHERE id = ? LIMIT 1
`

func (q *Queries) NpcByNpcID(ctx context.Context, id int32) (NpcType, error) {
	row := q.db.QueryRowContext(ctx, npcByNpcID, id)
	var i NpcType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lastname,
		&i.Level,
		&i.Race,
		&i.Class,
		&i.Bodytype,
		&i.Hp,
		&i.Mana,
		&i.Gender,
		&i.Texture,
		&i.Helmtexture,
		&i.Herosforgemodel,
		&i.Size,
		&i.HpRegenRate,
		&i.HpRegenPerSecond,
		&i.ManaRegenRate,
		&i.LoottableID,
		&i.MerchantID,
		&i.AltCurrencyID,
		&i.NpcSpellsID,
		&i.NpcSpellsEffectsID,
		&i.NpcFactionID,
		&i.AdventureTemplateID,
		&i.TrapTemplate,
		&i.Mindmg,
		&i.Maxdmg,
		&i.AttackCount,
		&i.Npcspecialattks,
		&i.SpecialAbilities,
		&i.Aggroradius,
		&i.Assistradius,
		&i.Face,
		&i.LuclinHairstyle,
		&i.LuclinHaircolor,
		&i.LuclinEyecolor,
		&i.LuclinEyecolor2,
		&i.LuclinBeardcolor,
		&i.LuclinBeard,
		&i.DrakkinHeritage,
		&i.DrakkinTattoo,
		&i.DrakkinDetails,
		&i.ArmortintID,
		&i.ArmortintRed,
		&i.ArmortintGreen,
		&i.ArmortintBlue,
		&i.DMeleeTexture1,
		&i.DMeleeTexture2,
		&i.AmmoIdfile,
		&i.PrimMeleeType,
		&i.SecMeleeType,
		&i.RangedType,
		&i.Runspeed,
		&i.Mr,
		&i.Cr,
		&i.Dr,
		&i.Fr,
		&i.Pr,
		&i.Corrup,
		&i.Phr,
		&i.SeeInvis,
		&i.SeeInvisUndead,
		&i.Qglobal,
		&i.Ac,
		&i.NpcAggro,
		&i.SpawnLimit,
		&i.AttackSpeed,
		&i.AttackDelay,
		&i.Findable,
		&i.Str,
		&i.Sta,
		&i.Dex,
		&i.Agi,
		&i.Int,
		&i.Wis,
		&i.Cha,
		&i.SeeHide,
		&i.SeeImprovedHide,
		&i.Trackable,
		&i.Isbot,
		&i.Exclude,
		&i.Atk,
		&i.Accuracy,
		&i.Avoidance,
		&i.SlowMitigation,
		&i.Version,
		&i.Maxlevel,
		&i.Scalerate,
		&i.PrivateCorpse,
		&i.UniqueSpawnByName,
		&i.Underwater,
		&i.Isquest,
		&i.Emoteid,
		&i.Spellscale,
		&i.Healscale,
		&i.NoTargetHotkey,
		&i.RaidTarget,
		&i.Armtexture,
		&i.Bracertexture,
		&i.Handtexture,
		&i.Legtexture,
		&i.Feettexture,
		&i.Light,
		&i.Walkspeed,
		&i.Peqid,
		&i.Unique,
		&i.Fixed,
		&i.IgnoreDespawn,
		&i.ShowName,
		&i.Untargetable,
		&i.CharmAc,
		&i.CharmMinDmg,
		&i.CharmMaxDmg,
		&i.CharmAttackDelay,
		&i.CharmAccuracyRating,
		&i.CharmAvoidanceRating,
		&i.CharmAtk,
		&i.SkipGlobalLoot,
		&i.RareSpawn,
		&i.StuckBehavior,
		&i.Model,
		&i.Flymode,
		&i.AlwaysAggro,
		&i.ExpMod,
		&i.HeroicStrikethrough,
		&i.FactionAmount,
		&i.KeepsSoldItems,
	)
	return i, err
}

const npcFactionsByFactionID = `-- name: NpcFactionsByFactionID :many
SELECT fl.name, fl.id, fe.value
FROM faction_list fl, npc_faction_entries fe
WHERE fe.npc_faction_id = ?
AND fe.faction_id = fl.id
GROUP BY fl.id
ORDER BY fe.value DESC
`

type NpcFactionsByFactionIDRow struct {
	Name  string
	ID    int32
	Value int32
}

func (q *Queries) NpcFactionsByFactionID(ctx context.Context, npcFactionID uint32) ([]NpcFactionsByFactionIDRow, error) {
	rows, err := q.db.QueryContext(ctx, npcFactionsByFactionID, npcFactionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NpcFactionsByFactionIDRow
	for rows.Next() {
		var i NpcFactionsByFactionIDRow
		if err := rows.Scan(&i.Name, &i.ID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const npcLootsByLootTableID = `-- name: NpcLootsByLootTableID :many
SELECT i.id, i.name, i.itemtype, lde.chance, lte.probability, lte.lootdrop_id, lte.multiplier
FROM items i, loottable_entries lte, lootdrop_entries lde
WHERE lte.loottable_id = ?
AND lte.lootdrop_id = lde.lootdrop_id
AND lde.item_id = i.id
`

type NpcLootsByLootTableIDRow struct {
	ID          int32
	Name        string
	Itemtype    int32
	Chance      float64
	Probability float64
	LootdropID  uint32
	Multiplier  uint8
}

func (q *Queries) NpcLootsByLootTableID(ctx context.Context, loottableID uint32) ([]NpcLootsByLootTableIDRow, error) {
	rows, err := q.db.QueryContext(ctx, npcLootsByLootTableID, loottableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NpcLootsByLootTableIDRow
	for rows.Next() {
		var i NpcLootsByLootTableIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Itemtype,
			&i.Chance,
			&i.Probability,
			&i.LootdropID,
			&i.Multiplier,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const npcLootsDiscoveredOnlyByLootTableID = `-- name: NpcLootsDiscoveredOnlyByLootTableID :many
SELECT i.id, i.name, i.itemtype, lde.chance, lte.probability, lte.lootdrop_id, lte.multiplier
FROM items i, loottable_entries lte, lootdrop_entries lde, discovered_items di
WHERE lte.loottable_id = ?
AND lte.lootdrop_id = lde.lootdrop_id
AND lde.item_id = i.id AND di.item_id = i.id
`

type NpcLootsDiscoveredOnlyByLootTableIDRow struct {
	ID          int32
	Name        string
	Itemtype    int32
	Chance      float64
	Probability float64
	LootdropID  uint32
	Multiplier  uint8
}

func (q *Queries) NpcLootsDiscoveredOnlyByLootTableID(ctx context.Context, loottableID uint32) ([]NpcLootsDiscoveredOnlyByLootTableIDRow, error) {
	rows, err := q.db.QueryContext(ctx, npcLootsDiscoveredOnlyByLootTableID, loottableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NpcLootsDiscoveredOnlyByLootTableIDRow
	for rows.Next() {
		var i NpcLootsDiscoveredOnlyByLootTableIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Itemtype,
			&i.Chance,
			&i.Probability,
			&i.LootdropID,
			&i.Multiplier,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const npcMerchantsByMerchantID = `-- name: NpcMerchantsByMerchantID :many
SELECT i.id, i.Name name, i.price, i.ldonprice, i.icon
FROM items i, merchantlist ml
WHERE ml.merchantid = ?
AND ml.item = i.id
ORDER BY ml.slot
`

type NpcMerchantsByMerchantIDRow struct {
	ID        int32
	Name      string
	Price     int32
	Ldonprice int32
	Icon      int32
}

func (q *Queries) NpcMerchantsByMerchantID(ctx context.Context, merchantid int32) ([]NpcMerchantsByMerchantIDRow, error) {
	rows, err := q.db.QueryContext(ctx, npcMerchantsByMerchantID, merchantid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NpcMerchantsByMerchantIDRow
	for rows.Next() {
		var i NpcMerchantsByMerchantIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Ldonprice,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const npcSearchByName = `-- name: NpcSearchByName :many
SELECT id, name, level FROM npc_types WHERE name LIKE ? ORDER BY name ASC
`

type NpcSearchByNameRow struct {
	ID    int32
	Name  string
	Level uint8
}

func (q *Queries) NpcSearchByName(ctx context.Context, name string) ([]NpcSearchByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, npcSearchByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NpcSearchByNameRow
	for rows.Next() {
		var i NpcSearchByNameRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Level); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const npcSpawnsByNpcID = `-- name: NpcSpawnsByNpcID :many
SELECT z.long_name, z.short_name, s2.x, s2.y, s2.z, sg.name AS spawngroup, sg.id AS spawngroupid, s2.respawntime
FROM zone z, spawnentry se, spawn2 s2, spawngroup sg
WHERE se.npcID = ?
AND se.spawngroupID = s2.spawngroupID
AND s2.zone = z.short_name
AND se.spawngroupID = sg.id
ORDER BY z.long_name
`

type NpcSpawnsByNpcIDRow struct {
	LongName     string
	ShortName    sql.NullString
	X            float64
	Y            float64
	Z            float64
	Spawngroup   string
	Spawngroupid int32
	Respawntime  int32
}

func (q *Queries) NpcSpawnsByNpcID(ctx context.Context, npcid int32) ([]NpcSpawnsByNpcIDRow, error) {
	rows, err := q.db.QueryContext(ctx, npcSpawnsByNpcID, npcid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NpcSpawnsByNpcIDRow
	for rows.Next() {
		var i NpcSpawnsByNpcIDRow
		if err := rows.Scan(
			&i.LongName,
			&i.ShortName,
			&i.X,
			&i.Y,
			&i.Z,
			&i.Spawngroup,
			&i.Spawngroupid,
			&i.Respawntime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const npcSpellEntriesByNpcSpellID = `-- name: NpcSpellEntriesByNpcSpellID :many
SELECT nse.spellid 
FROM npc_spells_entries nse
WHERE nse.npc_spells_id = ?
AND nse.minlevel <= ?
AND nse.maxlevel >= ?
ORDER BY nse.priority DESC
`

type NpcSpellEntriesByNpcSpellIDParams struct {
	NpcSpellsID int32
	Minlevel    uint8
	Maxlevel    uint8
}

func (q *Queries) NpcSpellEntriesByNpcSpellID(ctx context.Context, arg NpcSpellEntriesByNpcSpellIDParams) ([]uint16, error) {
	rows, err := q.db.QueryContext(ctx, npcSpellEntriesByNpcSpellID, arg.NpcSpellsID, arg.Minlevel, arg.Maxlevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uint16
	for rows.Next() {
		var spellid uint16
		if err := rows.Scan(&spellid); err != nil {
			return nil, err
		}
		items = append(items, spellid)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const npcSpellsByNpcSpellID = `-- name: NpcSpellsByNpcSpellID :many
SELECT id, name, proc_chance, attack_proc, range_proc, rproc_chance, defensive_proc, dproc_chance
FROM npc_spells ns
WHERE id=?
`

type NpcSpellsByNpcSpellIDRow struct {
	ID            uint32
	Name          sql.NullString
	ProcChance    int8
	AttackProc    int16
	RangeProc     int16
	RprocChance   int16
	DefensiveProc int16
	DprocChance   int16
}

func (q *Queries) NpcSpellsByNpcSpellID(ctx context.Context, id uint32) ([]NpcSpellsByNpcSpellIDRow, error) {
	rows, err := q.db.QueryContext(ctx, npcSpellsByNpcSpellID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NpcSpellsByNpcSpellIDRow
	for rows.Next() {
		var i NpcSpellsByNpcSpellIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProcChance,
			&i.AttackProc,
			&i.RangeProc,
			&i.RprocChance,
			&i.DefensiveProc,
			&i.DprocChance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const npcsAll = `-- name: NpcsAll :many
SELECT id, name, level FROM npc_types
`

type NpcsAllRow struct {
	ID    int32
	Name  string
	Level uint8
}

func (q *Queries) NpcsAll(ctx context.Context) ([]NpcsAllRow, error) {
	rows, err := q.db.QueryContext(ctx, npcsAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NpcsAllRow
	for rows.Next() {
		var i NpcsAllRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Level); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const playerByCharacterID = `-- name: PlayerByCharacterID :one
SELECT id, account_id, name, last_name, title, suffix, zone_id, zone_instance, y, x, z, heading, gender, race, class, level, deity, birthday, last_login, time_played, level2, anon, gm, face, hair_color, hair_style, beard, beard_color, eye_color_1, eye_color_2, drakkin_heritage, drakkin_tattoo, drakkin_details, ability_time_seconds, ability_number, ability_time_minutes, ability_time_hours, exp, exp_enabled, aa_points_spent, aa_exp, aa_points, group_leadership_exp, raid_leadership_exp, group_leadership_points, raid_leadership_points, points, cur_hp, mana, endurance, intoxication, str, sta, cha, dex, ` + "`" + `int` + "`" + `, agi, wis, zone_change_count, toxicity, hunger_level, thirst_level, ability_up, ldon_points_guk, ldon_points_mir, ldon_points_mmc, ldon_points_ruj, ldon_points_tak, ldon_points_available, tribute_time_remaining, career_tribute_points, tribute_points, tribute_active, pvp_status, pvp_kills, pvp_deaths, pvp_current_points, pvp_career_points, pvp_best_kill_streak, pvp_worst_death_streak, pvp_current_kill_streak, pvp2, pvp_type, show_helm, group_auto_consent, raid_auto_consent, guild_auto_consent, leadership_exp_on, resttimer, air_remaining, autosplit_enabled, lfp, lfg, mailkey, xtargets, firstlogon, e_aa_effects, e_percent_to_aa, e_expended_aa_spent, aa_points_spent_old, aa_points_old, e_last_invsnapshot, deleted_at FROM character_data WHERE id = ? LIMIT 1
`

func (q *Queries) PlayerByCharacterID(ctx context.Context, id uint32) (CharacterDatum, error) {
	row := q.db.QueryRowContext(ctx, playerByCharacterID, id)
	var i CharacterDatum
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.LastName,
		&i.Title,
		&i.Suffix,
		&i.ZoneID,
		&i.ZoneInstance,
		&i.Y,
		&i.X,
		&i.Z,
		&i.Heading,
		&i.Gender,
		&i.Race,
		&i.Class,
		&i.Level,
		&i.Deity,
		&i.Birthday,
		&i.LastLogin,
		&i.TimePlayed,
		&i.Level2,
		&i.Anon,
		&i.Gm,
		&i.Face,
		&i.HairColor,
		&i.HairStyle,
		&i.Beard,
		&i.BeardColor,
		&i.EyeColor1,
		&i.EyeColor2,
		&i.DrakkinHeritage,
		&i.DrakkinTattoo,
		&i.DrakkinDetails,
		&i.AbilityTimeSeconds,
		&i.AbilityNumber,
		&i.AbilityTimeMinutes,
		&i.AbilityTimeHours,
		&i.Exp,
		&i.ExpEnabled,
		&i.AaPointsSpent,
		&i.AaExp,
		&i.AaPoints,
		&i.GroupLeadershipExp,
		&i.RaidLeadershipExp,
		&i.GroupLeadershipPoints,
		&i.RaidLeadershipPoints,
		&i.Points,
		&i.CurHp,
		&i.Mana,
		&i.Endurance,
		&i.Intoxication,
		&i.Str,
		&i.Sta,
		&i.Cha,
		&i.Dex,
		&i.Int,
		&i.Agi,
		&i.Wis,
		&i.ZoneChangeCount,
		&i.Toxicity,
		&i.HungerLevel,
		&i.ThirstLevel,
		&i.AbilityUp,
		&i.LdonPointsGuk,
		&i.LdonPointsMir,
		&i.LdonPointsMmc,
		&i.LdonPointsRuj,
		&i.LdonPointsTak,
		&i.LdonPointsAvailable,
		&i.TributeTimeRemaining,
		&i.CareerTributePoints,
		&i.TributePoints,
		&i.TributeActive,
		&i.PvpStatus,
		&i.PvpKills,
		&i.PvpDeaths,
		&i.PvpCurrentPoints,
		&i.PvpCareerPoints,
		&i.PvpBestKillStreak,
		&i.PvpWorstDeathStreak,
		&i.PvpCurrentKillStreak,
		&i.Pvp2,
		&i.PvpType,
		&i.ShowHelm,
		&i.GroupAutoConsent,
		&i.RaidAutoConsent,
		&i.GuildAutoConsent,
		&i.LeadershipExpOn,
		&i.Resttimer,
		&i.AirRemaining,
		&i.AutosplitEnabled,
		&i.Lfp,
		&i.Lfg,
		&i.Mailkey,
		&i.Xtargets,
		&i.Firstlogon,
		&i.EAaEffects,
		&i.EPercentToAa,
		&i.EExpendedAaSpent,
		&i.AaPointsSpentOld,
		&i.AaPointsOld,
		&i.ELastInvsnapshot,
		&i.DeletedAt,
	)
	return i, err
}

const spellByID = `-- name: SpellByID :one
SELECT id, name, player_1, teleport_zone, you_cast, other_casts, cast_on_you, cast_on_other, spell_fades, ` + "`" + `range` + "`" + `, aoerange, pushback, pushup, cast_time, recovery_time, recast_time, buffdurationformula, buffduration, aeduration, mana, effect_base_value1, effect_base_value2, effect_base_value3, effect_base_value4, effect_base_value5, effect_base_value6, effect_base_value7, effect_base_value8, effect_base_value9, effect_base_value10, effect_base_value11, effect_base_value12, effect_limit_value1, effect_limit_value2, effect_limit_value3, effect_limit_value4, effect_limit_value5, effect_limit_value6, effect_limit_value7, effect_limit_value8, effect_limit_value9, effect_limit_value10, effect_limit_value11, effect_limit_value12, max1, max2, max3, max4, max5, max6, max7, max8, max9, max10, max11, max12, icon, memicon, components1, components2, components3, components4, component_counts1, component_counts2, component_counts3, component_counts4, noexpendreagent1, noexpendreagent2, noexpendreagent3, noexpendreagent4, formula1, formula2, formula3, formula4, formula5, formula6, formula7, formula8, formula9, formula10, formula11, formula12, lighttype, goodeffect, activated, resisttype, effectid1, effectid2, effectid3, effectid4, effectid5, effectid6, effectid7, effectid8, effectid9, effectid10, effectid11, effectid12, targettype, basediff, skill, zonetype, environmenttype, timeofday, classes1, classes2, classes3, classes4, classes5, classes6, classes7, classes8, classes9, classes10, classes11, classes12, classes13, classes14, classes15, classes16, castinganim, targetanim, traveltype, spellaffectindex, disallow_sit, deities0, deities1, deities2, deities3, deities4, deities5, deities6, deities7, deities8, deities9, deities10, deities11, deities12, deities13, deities14, deities15, deities16, field142, field143, new_icon, spellanim, uninterruptable, resistdiff, dot_stacking_exempt, deleteable, recourselink, no_partial_resist, field152, field153, short_buff_box, descnum, typedescnum, effectdescnum, effectdescnum2, npc_no_los, field160, reflectable, bonushate, field163, field164, ldon_trap, endurcost, endurtimerindex, isdiscipline, field169, field170, field171, field172, hateadded, endurupkeep, numhitstype, numhits, pvpresistbase, pvpresistcalc, pvpresistcap, spell_category, pvp_duration, pvp_duration_cap, pcnpc_only_flag, cast_not_standing, can_mgb, nodispell, npc_category, npc_usefulness, minresist, maxresist, viral_targets, viral_timer, nimbuseffect, conestartangle, conestopangle, sneaking, not_extendable, field198, field199, suspendable, viral_range, songcap, field203, field204, no_block, field206, spellgroup, ` + "`" + `rank` + "`" + `, field209, field210, castrestriction, allowrest, incombat, outofcombat, field215, field216, field217, aemaxtargets, maxtargets, field220, field221, field222, field223, persistdeath, field225, field226, min_dist, min_dist_mod, max_dist, max_dist_mod, min_range, field232, field233, field234, field235, field236 FROM spells_new WHERE id = ?
`

func (q *Queries) SpellByID(ctx context.Context, id int32) (SpellsNew, error) {
	row := q.db.QueryRowContext(ctx, spellByID, id)
	var i SpellsNew
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Player1,
		&i.TeleportZone,
		&i.YouCast,
		&i.OtherCasts,
		&i.CastOnYou,
		&i.CastOnOther,
		&i.SpellFades,
		&i.Range,
		&i.Aoerange,
		&i.Pushback,
		&i.Pushup,
		&i.CastTime,
		&i.RecoveryTime,
		&i.RecastTime,
		&i.Buffdurationformula,
		&i.Buffduration,
		&i.Aeduration,
		&i.Mana,
		&i.EffectBaseValue1,
		&i.EffectBaseValue2,
		&i.EffectBaseValue3,
		&i.EffectBaseValue4,
		&i.EffectBaseValue5,
		&i.EffectBaseValue6,
		&i.EffectBaseValue7,
		&i.EffectBaseValue8,
		&i.EffectBaseValue9,
		&i.EffectBaseValue10,
		&i.EffectBaseValue11,
		&i.EffectBaseValue12,
		&i.EffectLimitValue1,
		&i.EffectLimitValue2,
		&i.EffectLimitValue3,
		&i.EffectLimitValue4,
		&i.EffectLimitValue5,
		&i.EffectLimitValue6,
		&i.EffectLimitValue7,
		&i.EffectLimitValue8,
		&i.EffectLimitValue9,
		&i.EffectLimitValue10,
		&i.EffectLimitValue11,
		&i.EffectLimitValue12,
		&i.Max1,
		&i.Max2,
		&i.Max3,
		&i.Max4,
		&i.Max5,
		&i.Max6,
		&i.Max7,
		&i.Max8,
		&i.Max9,
		&i.Max10,
		&i.Max11,
		&i.Max12,
		&i.Icon,
		&i.Memicon,
		&i.Components1,
		&i.Components2,
		&i.Components3,
		&i.Components4,
		&i.ComponentCounts1,
		&i.ComponentCounts2,
		&i.ComponentCounts3,
		&i.ComponentCounts4,
		&i.Noexpendreagent1,
		&i.Noexpendreagent2,
		&i.Noexpendreagent3,
		&i.Noexpendreagent4,
		&i.Formula1,
		&i.Formula2,
		&i.Formula3,
		&i.Formula4,
		&i.Formula5,
		&i.Formula6,
		&i.Formula7,
		&i.Formula8,
		&i.Formula9,
		&i.Formula10,
		&i.Formula11,
		&i.Formula12,
		&i.Lighttype,
		&i.Goodeffect,
		&i.Activated,
		&i.Resisttype,
		&i.Effectid1,
		&i.Effectid2,
		&i.Effectid3,
		&i.Effectid4,
		&i.Effectid5,
		&i.Effectid6,
		&i.Effectid7,
		&i.Effectid8,
		&i.Effectid9,
		&i.Effectid10,
		&i.Effectid11,
		&i.Effectid12,
		&i.Targettype,
		&i.Basediff,
		&i.Skill,
		&i.Zonetype,
		&i.Environmenttype,
		&i.Timeofday,
		&i.Classes1,
		&i.Classes2,
		&i.Classes3,
		&i.Classes4,
		&i.Classes5,
		&i.Classes6,
		&i.Classes7,
		&i.Classes8,
		&i.Classes9,
		&i.Classes10,
		&i.Classes11,
		&i.Classes12,
		&i.Classes13,
		&i.Classes14,
		&i.Classes15,
		&i.Classes16,
		&i.Castinganim,
		&i.Targetanim,
		&i.Traveltype,
		&i.Spellaffectindex,
		&i.DisallowSit,
		&i.Deities0,
		&i.Deities1,
		&i.Deities2,
		&i.Deities3,
		&i.Deities4,
		&i.Deities5,
		&i.Deities6,
		&i.Deities7,
		&i.Deities8,
		&i.Deities9,
		&i.Deities10,
		&i.Deities11,
		&i.Deities12,
		&i.Deities13,
		&i.Deities14,
		&i.Deities15,
		&i.Deities16,
		&i.Field142,
		&i.Field143,
		&i.NewIcon,
		&i.Spellanim,
		&i.Uninterruptable,
		&i.Resistdiff,
		&i.DotStackingExempt,
		&i.Deleteable,
		&i.Recourselink,
		&i.NoPartialResist,
		&i.Field152,
		&i.Field153,
		&i.ShortBuffBox,
		&i.Descnum,
		&i.Typedescnum,
		&i.Effectdescnum,
		&i.Effectdescnum2,
		&i.NpcNoLos,
		&i.Field160,
		&i.Reflectable,
		&i.Bonushate,
		&i.Field163,
		&i.Field164,
		&i.LdonTrap,
		&i.Endurcost,
		&i.Endurtimerindex,
		&i.Isdiscipline,
		&i.Field169,
		&i.Field170,
		&i.Field171,
		&i.Field172,
		&i.Hateadded,
		&i.Endurupkeep,
		&i.Numhitstype,
		&i.Numhits,
		&i.Pvpresistbase,
		&i.Pvpresistcalc,
		&i.Pvpresistcap,
		&i.SpellCategory,
		&i.PvpDuration,
		&i.PvpDurationCap,
		&i.PcnpcOnlyFlag,
		&i.CastNotStanding,
		&i.CanMgb,
		&i.Nodispell,
		&i.NpcCategory,
		&i.NpcUsefulness,
		&i.Minresist,
		&i.Maxresist,
		&i.ViralTargets,
		&i.ViralTimer,
		&i.Nimbuseffect,
		&i.Conestartangle,
		&i.Conestopangle,
		&i.Sneaking,
		&i.NotExtendable,
		&i.Field198,
		&i.Field199,
		&i.Suspendable,
		&i.ViralRange,
		&i.Songcap,
		&i.Field203,
		&i.Field204,
		&i.NoBlock,
		&i.Field206,
		&i.Spellgroup,
		&i.Rank,
		&i.Field209,
		&i.Field210,
		&i.Castrestriction,
		&i.Allowrest,
		&i.Incombat,
		&i.Outofcombat,
		&i.Field215,
		&i.Field216,
		&i.Field217,
		&i.Aemaxtargets,
		&i.Maxtargets,
		&i.Field220,
		&i.Field221,
		&i.Field222,
		&i.Field223,
		&i.Persistdeath,
		&i.Field225,
		&i.Field226,
		&i.MinDist,
		&i.MinDistMod,
		&i.MaxDist,
		&i.MaxDistMod,
		&i.MinRange,
		&i.Field232,
		&i.Field233,
		&i.Field234,
		&i.Field235,
		&i.Field236,
	)
	return i, err
}

const spellSearchByName = `-- name: SpellSearchByName :many
SELECT id, name, player_1, teleport_zone, you_cast, other_casts, cast_on_you, cast_on_other, spell_fades, ` + "`" + `range` + "`" + `, aoerange, pushback, pushup, cast_time, recovery_time, recast_time, buffdurationformula, buffduration, aeduration, mana, effect_base_value1, effect_base_value2, effect_base_value3, effect_base_value4, effect_base_value5, effect_base_value6, effect_base_value7, effect_base_value8, effect_base_value9, effect_base_value10, effect_base_value11, effect_base_value12, effect_limit_value1, effect_limit_value2, effect_limit_value3, effect_limit_value4, effect_limit_value5, effect_limit_value6, effect_limit_value7, effect_limit_value8, effect_limit_value9, effect_limit_value10, effect_limit_value11, effect_limit_value12, max1, max2, max3, max4, max5, max6, max7, max8, max9, max10, max11, max12, icon, memicon, components1, components2, components3, components4, component_counts1, component_counts2, component_counts3, component_counts4, noexpendreagent1, noexpendreagent2, noexpendreagent3, noexpendreagent4, formula1, formula2, formula3, formula4, formula5, formula6, formula7, formula8, formula9, formula10, formula11, formula12, lighttype, goodeffect, activated, resisttype, effectid1, effectid2, effectid3, effectid4, effectid5, effectid6, effectid7, effectid8, effectid9, effectid10, effectid11, effectid12, targettype, basediff, skill, zonetype, environmenttype, timeofday, classes1, classes2, classes3, classes4, classes5, classes6, classes7, classes8, classes9, classes10, classes11, classes12, classes13, classes14, classes15, classes16, castinganim, targetanim, traveltype, spellaffectindex, disallow_sit, deities0, deities1, deities2, deities3, deities4, deities5, deities6, deities7, deities8, deities9, deities10, deities11, deities12, deities13, deities14, deities15, deities16, field142, field143, new_icon, spellanim, uninterruptable, resistdiff, dot_stacking_exempt, deleteable, recourselink, no_partial_resist, field152, field153, short_buff_box, descnum, typedescnum, effectdescnum, effectdescnum2, npc_no_los, field160, reflectable, bonushate, field163, field164, ldon_trap, endurcost, endurtimerindex, isdiscipline, field169, field170, field171, field172, hateadded, endurupkeep, numhitstype, numhits, pvpresistbase, pvpresistcalc, pvpresistcap, spell_category, pvp_duration, pvp_duration_cap, pcnpc_only_flag, cast_not_standing, can_mgb, nodispell, npc_category, npc_usefulness, minresist, maxresist, viral_targets, viral_timer, nimbuseffect, conestartangle, conestopangle, sneaking, not_extendable, field198, field199, suspendable, viral_range, songcap, field203, field204, no_block, field206, spellgroup, ` + "`" + `rank` + "`" + `, field209, field210, castrestriction, allowrest, incombat, outofcombat, field215, field216, field217, aemaxtargets, maxtargets, field220, field221, field222, field223, persistdeath, field225, field226, min_dist, min_dist_mod, max_dist, max_dist_mod, min_range, field232, field233, field234, field235, field236 FROM spells_new WHERE name LIKE ?
`

func (q *Queries) SpellSearchByName(ctx context.Context, name sql.NullString) ([]SpellsNew, error) {
	rows, err := q.db.QueryContext(ctx, spellSearchByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpellsNew
	for rows.Next() {
		var i SpellsNew
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Player1,
			&i.TeleportZone,
			&i.YouCast,
			&i.OtherCasts,
			&i.CastOnYou,
			&i.CastOnOther,
			&i.SpellFades,
			&i.Range,
			&i.Aoerange,
			&i.Pushback,
			&i.Pushup,
			&i.CastTime,
			&i.RecoveryTime,
			&i.RecastTime,
			&i.Buffdurationformula,
			&i.Buffduration,
			&i.Aeduration,
			&i.Mana,
			&i.EffectBaseValue1,
			&i.EffectBaseValue2,
			&i.EffectBaseValue3,
			&i.EffectBaseValue4,
			&i.EffectBaseValue5,
			&i.EffectBaseValue6,
			&i.EffectBaseValue7,
			&i.EffectBaseValue8,
			&i.EffectBaseValue9,
			&i.EffectBaseValue10,
			&i.EffectBaseValue11,
			&i.EffectBaseValue12,
			&i.EffectLimitValue1,
			&i.EffectLimitValue2,
			&i.EffectLimitValue3,
			&i.EffectLimitValue4,
			&i.EffectLimitValue5,
			&i.EffectLimitValue6,
			&i.EffectLimitValue7,
			&i.EffectLimitValue8,
			&i.EffectLimitValue9,
			&i.EffectLimitValue10,
			&i.EffectLimitValue11,
			&i.EffectLimitValue12,
			&i.Max1,
			&i.Max2,
			&i.Max3,
			&i.Max4,
			&i.Max5,
			&i.Max6,
			&i.Max7,
			&i.Max8,
			&i.Max9,
			&i.Max10,
			&i.Max11,
			&i.Max12,
			&i.Icon,
			&i.Memicon,
			&i.Components1,
			&i.Components2,
			&i.Components3,
			&i.Components4,
			&i.ComponentCounts1,
			&i.ComponentCounts2,
			&i.ComponentCounts3,
			&i.ComponentCounts4,
			&i.Noexpendreagent1,
			&i.Noexpendreagent2,
			&i.Noexpendreagent3,
			&i.Noexpendreagent4,
			&i.Formula1,
			&i.Formula2,
			&i.Formula3,
			&i.Formula4,
			&i.Formula5,
			&i.Formula6,
			&i.Formula7,
			&i.Formula8,
			&i.Formula9,
			&i.Formula10,
			&i.Formula11,
			&i.Formula12,
			&i.Lighttype,
			&i.Goodeffect,
			&i.Activated,
			&i.Resisttype,
			&i.Effectid1,
			&i.Effectid2,
			&i.Effectid3,
			&i.Effectid4,
			&i.Effectid5,
			&i.Effectid6,
			&i.Effectid7,
			&i.Effectid8,
			&i.Effectid9,
			&i.Effectid10,
			&i.Effectid11,
			&i.Effectid12,
			&i.Targettype,
			&i.Basediff,
			&i.Skill,
			&i.Zonetype,
			&i.Environmenttype,
			&i.Timeofday,
			&i.Classes1,
			&i.Classes2,
			&i.Classes3,
			&i.Classes4,
			&i.Classes5,
			&i.Classes6,
			&i.Classes7,
			&i.Classes8,
			&i.Classes9,
			&i.Classes10,
			&i.Classes11,
			&i.Classes12,
			&i.Classes13,
			&i.Classes14,
			&i.Classes15,
			&i.Classes16,
			&i.Castinganim,
			&i.Targetanim,
			&i.Traveltype,
			&i.Spellaffectindex,
			&i.DisallowSit,
			&i.Deities0,
			&i.Deities1,
			&i.Deities2,
			&i.Deities3,
			&i.Deities4,
			&i.Deities5,
			&i.Deities6,
			&i.Deities7,
			&i.Deities8,
			&i.Deities9,
			&i.Deities10,
			&i.Deities11,
			&i.Deities12,
			&i.Deities13,
			&i.Deities14,
			&i.Deities15,
			&i.Deities16,
			&i.Field142,
			&i.Field143,
			&i.NewIcon,
			&i.Spellanim,
			&i.Uninterruptable,
			&i.Resistdiff,
			&i.DotStackingExempt,
			&i.Deleteable,
			&i.Recourselink,
			&i.NoPartialResist,
			&i.Field152,
			&i.Field153,
			&i.ShortBuffBox,
			&i.Descnum,
			&i.Typedescnum,
			&i.Effectdescnum,
			&i.Effectdescnum2,
			&i.NpcNoLos,
			&i.Field160,
			&i.Reflectable,
			&i.Bonushate,
			&i.Field163,
			&i.Field164,
			&i.LdonTrap,
			&i.Endurcost,
			&i.Endurtimerindex,
			&i.Isdiscipline,
			&i.Field169,
			&i.Field170,
			&i.Field171,
			&i.Field172,
			&i.Hateadded,
			&i.Endurupkeep,
			&i.Numhitstype,
			&i.Numhits,
			&i.Pvpresistbase,
			&i.Pvpresistcalc,
			&i.Pvpresistcap,
			&i.SpellCategory,
			&i.PvpDuration,
			&i.PvpDurationCap,
			&i.PcnpcOnlyFlag,
			&i.CastNotStanding,
			&i.CanMgb,
			&i.Nodispell,
			&i.NpcCategory,
			&i.NpcUsefulness,
			&i.Minresist,
			&i.Maxresist,
			&i.ViralTargets,
			&i.ViralTimer,
			&i.Nimbuseffect,
			&i.Conestartangle,
			&i.Conestopangle,
			&i.Sneaking,
			&i.NotExtendable,
			&i.Field198,
			&i.Field199,
			&i.Suspendable,
			&i.ViralRange,
			&i.Songcap,
			&i.Field203,
			&i.Field204,
			&i.NoBlock,
			&i.Field206,
			&i.Spellgroup,
			&i.Rank,
			&i.Field209,
			&i.Field210,
			&i.Castrestriction,
			&i.Allowrest,
			&i.Incombat,
			&i.Outofcombat,
			&i.Field215,
			&i.Field216,
			&i.Field217,
			&i.Aemaxtargets,
			&i.Maxtargets,
			&i.Field220,
			&i.Field221,
			&i.Field222,
			&i.Field223,
			&i.Persistdeath,
			&i.Field225,
			&i.Field226,
			&i.MinDist,
			&i.MinDistMod,
			&i.MaxDist,
			&i.MaxDistMod,
			&i.MinRange,
			&i.Field232,
			&i.Field233,
			&i.Field234,
			&i.Field235,
			&i.Field236,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const spellsAll = `-- name: SpellsAll :many
SELECT id, name, player_1, teleport_zone, you_cast, other_casts, cast_on_you, cast_on_other, spell_fades, ` + "`" + `range` + "`" + `, aoerange, pushback, pushup, cast_time, recovery_time, recast_time, buffdurationformula, buffduration, aeduration, mana, effect_base_value1, effect_base_value2, effect_base_value3, effect_base_value4, effect_base_value5, effect_base_value6, effect_base_value7, effect_base_value8, effect_base_value9, effect_base_value10, effect_base_value11, effect_base_value12, effect_limit_value1, effect_limit_value2, effect_limit_value3, effect_limit_value4, effect_limit_value5, effect_limit_value6, effect_limit_value7, effect_limit_value8, effect_limit_value9, effect_limit_value10, effect_limit_value11, effect_limit_value12, max1, max2, max3, max4, max5, max6, max7, max8, max9, max10, max11, max12, icon, memicon, components1, components2, components3, components4, component_counts1, component_counts2, component_counts3, component_counts4, noexpendreagent1, noexpendreagent2, noexpendreagent3, noexpendreagent4, formula1, formula2, formula3, formula4, formula5, formula6, formula7, formula8, formula9, formula10, formula11, formula12, lighttype, goodeffect, activated, resisttype, effectid1, effectid2, effectid3, effectid4, effectid5, effectid6, effectid7, effectid8, effectid9, effectid10, effectid11, effectid12, targettype, basediff, skill, zonetype, environmenttype, timeofday, classes1, classes2, classes3, classes4, classes5, classes6, classes7, classes8, classes9, classes10, classes11, classes12, classes13, classes14, classes15, classes16, castinganim, targetanim, traveltype, spellaffectindex, disallow_sit, deities0, deities1, deities2, deities3, deities4, deities5, deities6, deities7, deities8, deities9, deities10, deities11, deities12, deities13, deities14, deities15, deities16, field142, field143, new_icon, spellanim, uninterruptable, resistdiff, dot_stacking_exempt, deleteable, recourselink, no_partial_resist, field152, field153, short_buff_box, descnum, typedescnum, effectdescnum, effectdescnum2, npc_no_los, field160, reflectable, bonushate, field163, field164, ldon_trap, endurcost, endurtimerindex, isdiscipline, field169, field170, field171, field172, hateadded, endurupkeep, numhitstype, numhits, pvpresistbase, pvpresistcalc, pvpresistcap, spell_category, pvp_duration, pvp_duration_cap, pcnpc_only_flag, cast_not_standing, can_mgb, nodispell, npc_category, npc_usefulness, minresist, maxresist, viral_targets, viral_timer, nimbuseffect, conestartangle, conestopangle, sneaking, not_extendable, field198, field199, suspendable, viral_range, songcap, field203, field204, no_block, field206, spellgroup, ` + "`" + `rank` + "`" + `, field209, field210, castrestriction, allowrest, incombat, outofcombat, field215, field216, field217, aemaxtargets, maxtargets, field220, field221, field222, field223, persistdeath, field225, field226, min_dist, min_dist_mod, max_dist, max_dist_mod, min_range, field232, field233, field234, field235, field236 FROM spells_new
`

func (q *Queries) SpellsAll(ctx context.Context) ([]SpellsNew, error) {
	rows, err := q.db.QueryContext(ctx, spellsAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpellsNew
	for rows.Next() {
		var i SpellsNew
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Player1,
			&i.TeleportZone,
			&i.YouCast,
			&i.OtherCasts,
			&i.CastOnYou,
			&i.CastOnOther,
			&i.SpellFades,
			&i.Range,
			&i.Aoerange,
			&i.Pushback,
			&i.Pushup,
			&i.CastTime,
			&i.RecoveryTime,
			&i.RecastTime,
			&i.Buffdurationformula,
			&i.Buffduration,
			&i.Aeduration,
			&i.Mana,
			&i.EffectBaseValue1,
			&i.EffectBaseValue2,
			&i.EffectBaseValue3,
			&i.EffectBaseValue4,
			&i.EffectBaseValue5,
			&i.EffectBaseValue6,
			&i.EffectBaseValue7,
			&i.EffectBaseValue8,
			&i.EffectBaseValue9,
			&i.EffectBaseValue10,
			&i.EffectBaseValue11,
			&i.EffectBaseValue12,
			&i.EffectLimitValue1,
			&i.EffectLimitValue2,
			&i.EffectLimitValue3,
			&i.EffectLimitValue4,
			&i.EffectLimitValue5,
			&i.EffectLimitValue6,
			&i.EffectLimitValue7,
			&i.EffectLimitValue8,
			&i.EffectLimitValue9,
			&i.EffectLimitValue10,
			&i.EffectLimitValue11,
			&i.EffectLimitValue12,
			&i.Max1,
			&i.Max2,
			&i.Max3,
			&i.Max4,
			&i.Max5,
			&i.Max6,
			&i.Max7,
			&i.Max8,
			&i.Max9,
			&i.Max10,
			&i.Max11,
			&i.Max12,
			&i.Icon,
			&i.Memicon,
			&i.Components1,
			&i.Components2,
			&i.Components3,
			&i.Components4,
			&i.ComponentCounts1,
			&i.ComponentCounts2,
			&i.ComponentCounts3,
			&i.ComponentCounts4,
			&i.Noexpendreagent1,
			&i.Noexpendreagent2,
			&i.Noexpendreagent3,
			&i.Noexpendreagent4,
			&i.Formula1,
			&i.Formula2,
			&i.Formula3,
			&i.Formula4,
			&i.Formula5,
			&i.Formula6,
			&i.Formula7,
			&i.Formula8,
			&i.Formula9,
			&i.Formula10,
			&i.Formula11,
			&i.Formula12,
			&i.Lighttype,
			&i.Goodeffect,
			&i.Activated,
			&i.Resisttype,
			&i.Effectid1,
			&i.Effectid2,
			&i.Effectid3,
			&i.Effectid4,
			&i.Effectid5,
			&i.Effectid6,
			&i.Effectid7,
			&i.Effectid8,
			&i.Effectid9,
			&i.Effectid10,
			&i.Effectid11,
			&i.Effectid12,
			&i.Targettype,
			&i.Basediff,
			&i.Skill,
			&i.Zonetype,
			&i.Environmenttype,
			&i.Timeofday,
			&i.Classes1,
			&i.Classes2,
			&i.Classes3,
			&i.Classes4,
			&i.Classes5,
			&i.Classes6,
			&i.Classes7,
			&i.Classes8,
			&i.Classes9,
			&i.Classes10,
			&i.Classes11,
			&i.Classes12,
			&i.Classes13,
			&i.Classes14,
			&i.Classes15,
			&i.Classes16,
			&i.Castinganim,
			&i.Targetanim,
			&i.Traveltype,
			&i.Spellaffectindex,
			&i.DisallowSit,
			&i.Deities0,
			&i.Deities1,
			&i.Deities2,
			&i.Deities3,
			&i.Deities4,
			&i.Deities5,
			&i.Deities6,
			&i.Deities7,
			&i.Deities8,
			&i.Deities9,
			&i.Deities10,
			&i.Deities11,
			&i.Deities12,
			&i.Deities13,
			&i.Deities14,
			&i.Deities15,
			&i.Deities16,
			&i.Field142,
			&i.Field143,
			&i.NewIcon,
			&i.Spellanim,
			&i.Uninterruptable,
			&i.Resistdiff,
			&i.DotStackingExempt,
			&i.Deleteable,
			&i.Recourselink,
			&i.NoPartialResist,
			&i.Field152,
			&i.Field153,
			&i.ShortBuffBox,
			&i.Descnum,
			&i.Typedescnum,
			&i.Effectdescnum,
			&i.Effectdescnum2,
			&i.NpcNoLos,
			&i.Field160,
			&i.Reflectable,
			&i.Bonushate,
			&i.Field163,
			&i.Field164,
			&i.LdonTrap,
			&i.Endurcost,
			&i.Endurtimerindex,
			&i.Isdiscipline,
			&i.Field169,
			&i.Field170,
			&i.Field171,
			&i.Field172,
			&i.Hateadded,
			&i.Endurupkeep,
			&i.Numhitstype,
			&i.Numhits,
			&i.Pvpresistbase,
			&i.Pvpresistcalc,
			&i.Pvpresistcap,
			&i.SpellCategory,
			&i.PvpDuration,
			&i.PvpDurationCap,
			&i.PcnpcOnlyFlag,
			&i.CastNotStanding,
			&i.CanMgb,
			&i.Nodispell,
			&i.NpcCategory,
			&i.NpcUsefulness,
			&i.Minresist,
			&i.Maxresist,
			&i.ViralTargets,
			&i.ViralTimer,
			&i.Nimbuseffect,
			&i.Conestartangle,
			&i.Conestopangle,
			&i.Sneaking,
			&i.NotExtendable,
			&i.Field198,
			&i.Field199,
			&i.Suspendable,
			&i.ViralRange,
			&i.Songcap,
			&i.Field203,
			&i.Field204,
			&i.NoBlock,
			&i.Field206,
			&i.Spellgroup,
			&i.Rank,
			&i.Field209,
			&i.Field210,
			&i.Castrestriction,
			&i.Allowrest,
			&i.Incombat,
			&i.Outofcombat,
			&i.Field215,
			&i.Field216,
			&i.Field217,
			&i.Aemaxtargets,
			&i.Maxtargets,
			&i.Field220,
			&i.Field221,
			&i.Field222,
			&i.Field223,
			&i.Persistdeath,
			&i.Field225,
			&i.Field226,
			&i.MinDist,
			&i.MinDistMod,
			&i.MaxDist,
			&i.MaxDistMod,
			&i.MinRange,
			&i.Field232,
			&i.Field233,
			&i.Field234,
			&i.Field235,
			&i.Field236,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const zoneByShortName = `-- name: ZoneByShortName :one
SELECT id, zoneidnumber, version, short_name, long_name, min_status, map_file_name, note, min_expansion, max_expansion, content_flags, content_flags_disabled, expansion, file_name, safe_x, safe_y, safe_z, safe_heading, graveyard_id, min_level, max_level, timezone, maxclients, ruleset, underworld, minclip, maxclip, fog_minclip, fog_maxclip, fog_blue, fog_red, fog_green, sky, ztype, zone_exp_multiplier, walkspeed, time_type, fog_red1, fog_green1, fog_blue1, fog_minclip1, fog_maxclip1, fog_red2, fog_green2, fog_blue2, fog_minclip2, fog_maxclip2, fog_red3, fog_green3, fog_blue3, fog_minclip3, fog_maxclip3, fog_red4, fog_green4, fog_blue4, fog_minclip4, fog_maxclip4, fog_density, flag_needed, canbind, cancombat, canlevitate, castoutdoor, hotzone, insttype, shutdowndelay, peqzone, bypass_expansion_check, suspendbuffs, rain_chance1, rain_chance2, rain_chance3, rain_chance4, rain_duration1, rain_duration2, rain_duration3, rain_duration4, snow_chance1, snow_chance2, snow_chance3, snow_chance4, snow_duration1, snow_duration2, snow_duration3, snow_duration4, gravity, type, skylock, fast_regen_hp, fast_regen_mana, fast_regen_endurance, npc_max_aggro_dist, max_movement_update_range, underworld_teleport_index, lava_damage, min_lava_damage, idle_when_empty, seconds_before_idle FROM zone WHERE short_name = ? AND expansion <= ?
`

type ZoneByShortNameParams struct {
	ShortName sql.NullString
	Expansion int8
}

func (q *Queries) ZoneByShortName(ctx context.Context, arg ZoneByShortNameParams) (Zone, error) {
	row := q.db.QueryRowContext(ctx, zoneByShortName, arg.ShortName, arg.Expansion)
	var i Zone
	err := row.Scan(
		&i.ID,
		&i.Zoneidnumber,
		&i.Version,
		&i.ShortName,
		&i.LongName,
		&i.MinStatus,
		&i.MapFileName,
		&i.Note,
		&i.MinExpansion,
		&i.MaxExpansion,
		&i.ContentFlags,
		&i.ContentFlagsDisabled,
		&i.Expansion,
		&i.FileName,
		&i.SafeX,
		&i.SafeY,
		&i.SafeZ,
		&i.SafeHeading,
		&i.GraveyardID,
		&i.MinLevel,
		&i.MaxLevel,
		&i.Timezone,
		&i.Maxclients,
		&i.Ruleset,
		&i.Underworld,
		&i.Minclip,
		&i.Maxclip,
		&i.FogMinclip,
		&i.FogMaxclip,
		&i.FogBlue,
		&i.FogRed,
		&i.FogGreen,
		&i.Sky,
		&i.Ztype,
		&i.ZoneExpMultiplier,
		&i.Walkspeed,
		&i.TimeType,
		&i.FogRed1,
		&i.FogGreen1,
		&i.FogBlue1,
		&i.FogMinclip1,
		&i.FogMaxclip1,
		&i.FogRed2,
		&i.FogGreen2,
		&i.FogBlue2,
		&i.FogMinclip2,
		&i.FogMaxclip2,
		&i.FogRed3,
		&i.FogGreen3,
		&i.FogBlue3,
		&i.FogMinclip3,
		&i.FogMaxclip3,
		&i.FogRed4,
		&i.FogGreen4,
		&i.FogBlue4,
		&i.FogMinclip4,
		&i.FogMaxclip4,
		&i.FogDensity,
		&i.FlagNeeded,
		&i.Canbind,
		&i.Cancombat,
		&i.Canlevitate,
		&i.Castoutdoor,
		&i.Hotzone,
		&i.Insttype,
		&i.Shutdowndelay,
		&i.Peqzone,
		&i.BypassExpansionCheck,
		&i.Suspendbuffs,
		&i.RainChance1,
		&i.RainChance2,
		&i.RainChance3,
		&i.RainChance4,
		&i.RainDuration1,
		&i.RainDuration2,
		&i.RainDuration3,
		&i.RainDuration4,
		&i.SnowChance1,
		&i.SnowChance2,
		&i.SnowChance3,
		&i.SnowChance4,
		&i.SnowDuration1,
		&i.SnowDuration2,
		&i.SnowDuration3,
		&i.SnowDuration4,
		&i.Gravity,
		&i.Type,
		&i.Skylock,
		&i.FastRegenHp,
		&i.FastRegenMana,
		&i.FastRegenEndurance,
		&i.NpcMaxAggroDist,
		&i.MaxMovementUpdateRange,
		&i.UnderworldTeleportIndex,
		&i.LavaDamage,
		&i.MinLavaDamage,
		&i.IdleWhenEmpty,
		&i.SecondsBeforeIdle,
	)
	return i, err
}

const zoneByZoneIDNumber = `-- name: ZoneByZoneIDNumber :one
SELECT id, zoneidnumber, version, short_name, long_name, min_status, map_file_name, note, min_expansion, max_expansion, content_flags, content_flags_disabled, expansion, file_name, safe_x, safe_y, safe_z, safe_heading, graveyard_id, min_level, max_level, timezone, maxclients, ruleset, underworld, minclip, maxclip, fog_minclip, fog_maxclip, fog_blue, fog_red, fog_green, sky, ztype, zone_exp_multiplier, walkspeed, time_type, fog_red1, fog_green1, fog_blue1, fog_minclip1, fog_maxclip1, fog_red2, fog_green2, fog_blue2, fog_minclip2, fog_maxclip2, fog_red3, fog_green3, fog_blue3, fog_minclip3, fog_maxclip3, fog_red4, fog_green4, fog_blue4, fog_minclip4, fog_maxclip4, fog_density, flag_needed, canbind, cancombat, canlevitate, castoutdoor, hotzone, insttype, shutdowndelay, peqzone, bypass_expansion_check, suspendbuffs, rain_chance1, rain_chance2, rain_chance3, rain_chance4, rain_duration1, rain_duration2, rain_duration3, rain_duration4, snow_chance1, snow_chance2, snow_chance3, snow_chance4, snow_duration1, snow_duration2, snow_duration3, snow_duration4, gravity, type, skylock, fast_regen_hp, fast_regen_mana, fast_regen_endurance, npc_max_aggro_dist, max_movement_update_range, underworld_teleport_index, lava_damage, min_lava_damage, idle_when_empty, seconds_before_idle FROM zone WHERE zoneidnumber = ? AND expansion <= ?
`

type ZoneByZoneIDNumberParams struct {
	Zoneidnumber int32
	Expansion    int8
}

func (q *Queries) ZoneByZoneIDNumber(ctx context.Context, arg ZoneByZoneIDNumberParams) (Zone, error) {
	row := q.db.QueryRowContext(ctx, zoneByZoneIDNumber, arg.Zoneidnumber, arg.Expansion)
	var i Zone
	err := row.Scan(
		&i.ID,
		&i.Zoneidnumber,
		&i.Version,
		&i.ShortName,
		&i.LongName,
		&i.MinStatus,
		&i.MapFileName,
		&i.Note,
		&i.MinExpansion,
		&i.MaxExpansion,
		&i.ContentFlags,
		&i.ContentFlagsDisabled,
		&i.Expansion,
		&i.FileName,
		&i.SafeX,
		&i.SafeY,
		&i.SafeZ,
		&i.SafeHeading,
		&i.GraveyardID,
		&i.MinLevel,
		&i.MaxLevel,
		&i.Timezone,
		&i.Maxclients,
		&i.Ruleset,
		&i.Underworld,
		&i.Minclip,
		&i.Maxclip,
		&i.FogMinclip,
		&i.FogMaxclip,
		&i.FogBlue,
		&i.FogRed,
		&i.FogGreen,
		&i.Sky,
		&i.Ztype,
		&i.ZoneExpMultiplier,
		&i.Walkspeed,
		&i.TimeType,
		&i.FogRed1,
		&i.FogGreen1,
		&i.FogBlue1,
		&i.FogMinclip1,
		&i.FogMaxclip1,
		&i.FogRed2,
		&i.FogGreen2,
		&i.FogBlue2,
		&i.FogMinclip2,
		&i.FogMaxclip2,
		&i.FogRed3,
		&i.FogGreen3,
		&i.FogBlue3,
		&i.FogMinclip3,
		&i.FogMaxclip3,
		&i.FogRed4,
		&i.FogGreen4,
		&i.FogBlue4,
		&i.FogMinclip4,
		&i.FogMaxclip4,
		&i.FogDensity,
		&i.FlagNeeded,
		&i.Canbind,
		&i.Cancombat,
		&i.Canlevitate,
		&i.Castoutdoor,
		&i.Hotzone,
		&i.Insttype,
		&i.Shutdowndelay,
		&i.Peqzone,
		&i.BypassExpansionCheck,
		&i.Suspendbuffs,
		&i.RainChance1,
		&i.RainChance2,
		&i.RainChance3,
		&i.RainChance4,
		&i.RainDuration1,
		&i.RainDuration2,
		&i.RainDuration3,
		&i.RainDuration4,
		&i.SnowChance1,
		&i.SnowChance2,
		&i.SnowChance3,
		&i.SnowChance4,
		&i.SnowDuration1,
		&i.SnowDuration2,
		&i.SnowDuration3,
		&i.SnowDuration4,
		&i.Gravity,
		&i.Type,
		&i.Skylock,
		&i.FastRegenHp,
		&i.FastRegenMana,
		&i.FastRegenEndurance,
		&i.NpcMaxAggroDist,
		&i.MaxMovementUpdateRange,
		&i.UnderworldTeleportIndex,
		&i.LavaDamage,
		&i.MinLavaDamage,
		&i.IdleWhenEmpty,
		&i.SecondsBeforeIdle,
	)
	return i, err
}

const zoneSearchByName = `-- name: ZoneSearchByName :many
SELECT id, zoneidnumber, version, short_name, long_name, min_status, map_file_name, note, min_expansion, max_expansion, content_flags, content_flags_disabled, expansion, file_name, safe_x, safe_y, safe_z, safe_heading, graveyard_id, min_level, max_level, timezone, maxclients, ruleset, underworld, minclip, maxclip, fog_minclip, fog_maxclip, fog_blue, fog_red, fog_green, sky, ztype, zone_exp_multiplier, walkspeed, time_type, fog_red1, fog_green1, fog_blue1, fog_minclip1, fog_maxclip1, fog_red2, fog_green2, fog_blue2, fog_minclip2, fog_maxclip2, fog_red3, fog_green3, fog_blue3, fog_minclip3, fog_maxclip3, fog_red4, fog_green4, fog_blue4, fog_minclip4, fog_maxclip4, fog_density, flag_needed, canbind, cancombat, canlevitate, castoutdoor, hotzone, insttype, shutdowndelay, peqzone, bypass_expansion_check, suspendbuffs, rain_chance1, rain_chance2, rain_chance3, rain_chance4, rain_duration1, rain_duration2, rain_duration3, rain_duration4, snow_chance1, snow_chance2, snow_chance3, snow_chance4, snow_duration1, snow_duration2, snow_duration3, snow_duration4, gravity, type, skylock, fast_regen_hp, fast_regen_mana, fast_regen_endurance, npc_max_aggro_dist, max_movement_update_range, underworld_teleport_index, lava_damage, min_lava_damage, idle_when_empty, seconds_before_idle FROM zone WHERE (short_name LIKE ? OR long_name LIKE ?) AND expansion <= ? ORDER BY short_name ASC
`

type ZoneSearchByNameParams struct {
	ShortName sql.NullString
	LongName  string
	Expansion int8
}

func (q *Queries) ZoneSearchByName(ctx context.Context, arg ZoneSearchByNameParams) ([]Zone, error) {
	rows, err := q.db.QueryContext(ctx, zoneSearchByName, arg.ShortName, arg.LongName, arg.Expansion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Zone
	for rows.Next() {
		var i Zone
		if err := rows.Scan(
			&i.ID,
			&i.Zoneidnumber,
			&i.Version,
			&i.ShortName,
			&i.LongName,
			&i.MinStatus,
			&i.MapFileName,
			&i.Note,
			&i.MinExpansion,
			&i.MaxExpansion,
			&i.ContentFlags,
			&i.ContentFlagsDisabled,
			&i.Expansion,
			&i.FileName,
			&i.SafeX,
			&i.SafeY,
			&i.SafeZ,
			&i.SafeHeading,
			&i.GraveyardID,
			&i.MinLevel,
			&i.MaxLevel,
			&i.Timezone,
			&i.Maxclients,
			&i.Ruleset,
			&i.Underworld,
			&i.Minclip,
			&i.Maxclip,
			&i.FogMinclip,
			&i.FogMaxclip,
			&i.FogBlue,
			&i.FogRed,
			&i.FogGreen,
			&i.Sky,
			&i.Ztype,
			&i.ZoneExpMultiplier,
			&i.Walkspeed,
			&i.TimeType,
			&i.FogRed1,
			&i.FogGreen1,
			&i.FogBlue1,
			&i.FogMinclip1,
			&i.FogMaxclip1,
			&i.FogRed2,
			&i.FogGreen2,
			&i.FogBlue2,
			&i.FogMinclip2,
			&i.FogMaxclip2,
			&i.FogRed3,
			&i.FogGreen3,
			&i.FogBlue3,
			&i.FogMinclip3,
			&i.FogMaxclip3,
			&i.FogRed4,
			&i.FogGreen4,
			&i.FogBlue4,
			&i.FogMinclip4,
			&i.FogMaxclip4,
			&i.FogDensity,
			&i.FlagNeeded,
			&i.Canbind,
			&i.Cancombat,
			&i.Canlevitate,
			&i.Castoutdoor,
			&i.Hotzone,
			&i.Insttype,
			&i.Shutdowndelay,
			&i.Peqzone,
			&i.BypassExpansionCheck,
			&i.Suspendbuffs,
			&i.RainChance1,
			&i.RainChance2,
			&i.RainChance3,
			&i.RainChance4,
			&i.RainDuration1,
			&i.RainDuration2,
			&i.RainDuration3,
			&i.RainDuration4,
			&i.SnowChance1,
			&i.SnowChance2,
			&i.SnowChance3,
			&i.SnowChance4,
			&i.SnowDuration1,
			&i.SnowDuration2,
			&i.SnowDuration3,
			&i.SnowDuration4,
			&i.Gravity,
			&i.Type,
			&i.Skylock,
			&i.FastRegenHp,
			&i.FastRegenMana,
			&i.FastRegenEndurance,
			&i.NpcMaxAggroDist,
			&i.MaxMovementUpdateRange,
			&i.UnderworldTeleportIndex,
			&i.LavaDamage,
			&i.MinLavaDamage,
			&i.IdleWhenEmpty,
			&i.SecondsBeforeIdle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const zonesAll = `-- name: ZonesAll :many
SELECT id, zoneidnumber, version, short_name, long_name, min_status, map_file_name, note, min_expansion, max_expansion, content_flags, content_flags_disabled, expansion, file_name, safe_x, safe_y, safe_z, safe_heading, graveyard_id, min_level, max_level, timezone, maxclients, ruleset, underworld, minclip, maxclip, fog_minclip, fog_maxclip, fog_blue, fog_red, fog_green, sky, ztype, zone_exp_multiplier, walkspeed, time_type, fog_red1, fog_green1, fog_blue1, fog_minclip1, fog_maxclip1, fog_red2, fog_green2, fog_blue2, fog_minclip2, fog_maxclip2, fog_red3, fog_green3, fog_blue3, fog_minclip3, fog_maxclip3, fog_red4, fog_green4, fog_blue4, fog_minclip4, fog_maxclip4, fog_density, flag_needed, canbind, cancombat, canlevitate, castoutdoor, hotzone, insttype, shutdowndelay, peqzone, bypass_expansion_check, suspendbuffs, rain_chance1, rain_chance2, rain_chance3, rain_chance4, rain_duration1, rain_duration2, rain_duration3, rain_duration4, snow_chance1, snow_chance2, snow_chance3, snow_chance4, snow_duration1, snow_duration2, snow_duration3, snow_duration4, gravity, type, skylock, fast_regen_hp, fast_regen_mana, fast_regen_endurance, npc_max_aggro_dist, max_movement_update_range, underworld_teleport_index, lava_damage, min_lava_damage, idle_when_empty, seconds_before_idle FROM zone WHERE expansion <= ? ORDER by short_name ASC
`

func (q *Queries) ZonesAll(ctx context.Context, expansion int8) ([]Zone, error) {
	rows, err := q.db.QueryContext(ctx, zonesAll, expansion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Zone
	for rows.Next() {
		var i Zone
		if err := rows.Scan(
			&i.ID,
			&i.Zoneidnumber,
			&i.Version,
			&i.ShortName,
			&i.LongName,
			&i.MinStatus,
			&i.MapFileName,
			&i.Note,
			&i.MinExpansion,
			&i.MaxExpansion,
			&i.ContentFlags,
			&i.ContentFlagsDisabled,
			&i.Expansion,
			&i.FileName,
			&i.SafeX,
			&i.SafeY,
			&i.SafeZ,
			&i.SafeHeading,
			&i.GraveyardID,
			&i.MinLevel,
			&i.MaxLevel,
			&i.Timezone,
			&i.Maxclients,
			&i.Ruleset,
			&i.Underworld,
			&i.Minclip,
			&i.Maxclip,
			&i.FogMinclip,
			&i.FogMaxclip,
			&i.FogBlue,
			&i.FogRed,
			&i.FogGreen,
			&i.Sky,
			&i.Ztype,
			&i.ZoneExpMultiplier,
			&i.Walkspeed,
			&i.TimeType,
			&i.FogRed1,
			&i.FogGreen1,
			&i.FogBlue1,
			&i.FogMinclip1,
			&i.FogMaxclip1,
			&i.FogRed2,
			&i.FogGreen2,
			&i.FogBlue2,
			&i.FogMinclip2,
			&i.FogMaxclip2,
			&i.FogRed3,
			&i.FogGreen3,
			&i.FogBlue3,
			&i.FogMinclip3,
			&i.FogMaxclip3,
			&i.FogRed4,
			&i.FogGreen4,
			&i.FogBlue4,
			&i.FogMinclip4,
			&i.FogMaxclip4,
			&i.FogDensity,
			&i.FlagNeeded,
			&i.Canbind,
			&i.Cancombat,
			&i.Canlevitate,
			&i.Castoutdoor,
			&i.Hotzone,
			&i.Insttype,
			&i.Shutdowndelay,
			&i.Peqzone,
			&i.BypassExpansionCheck,
			&i.Suspendbuffs,
			&i.RainChance1,
			&i.RainChance2,
			&i.RainChance3,
			&i.RainChance4,
			&i.RainDuration1,
			&i.RainDuration2,
			&i.RainDuration3,
			&i.RainDuration4,
			&i.SnowChance1,
			&i.SnowChance2,
			&i.SnowChance3,
			&i.SnowChance4,
			&i.SnowDuration1,
			&i.SnowDuration2,
			&i.SnowDuration3,
			&i.SnowDuration4,
			&i.Gravity,
			&i.Type,
			&i.Skylock,
			&i.FastRegenHp,
			&i.FastRegenMana,
			&i.FastRegenEndurance,
			&i.NpcMaxAggroDist,
			&i.MaxMovementUpdateRange,
			&i.UnderworldTeleportIndex,
			&i.LavaDamage,
			&i.MinLavaDamage,
			&i.IdleWhenEmpty,
			&i.SecondsBeforeIdle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
